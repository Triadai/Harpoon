## Copyright (C) 2005 Alex Salcianu - salcianu@alum.mit.edu
## Licensed under the GPL; see COPYING for details.
#!/bin/bash

####################################################################
# Script for producing plain, old-style .a libraries from
#   - a bunch of .o object files
#   - other .a libraries
# This script first extracts all .o files from the input .a archives
# and next puts all .o files (those from .a's and the new ones) into
# the resulting .a archive.  [ Just cramming .o's and .a's into the
# resulting .a works with ar, but it's useless when you use the lib
# in gcc (gcc does not handle recursive .a's) ]
#
# The motivation for this script is my desire to avoid libtool and
# other fancy (but also complex) tools.
#
# NOTE: I (=AS) am surprised that I couldn't find something like this
# in Linux ...  Maybe I did not search well-enough.
#
####################################################################

function printUsage() {
    echo -e "Usage:\n\tbuild-a-lib <outLibName> <file_1> <file_2> ... <file_k>"
    echo -e "Where:"
    echo -e "\t<outLibName> is the name of the produced .a library, INCLUDING the trailing .a"
    echo -e "\tEach <file_i> is the name of a .o object file / a .a archive containing .o's"
    echo -e "Example:"
    echo -e "\tbuild-a-lib newLib obj1.o lib1.a lib2.a obj2.o"
    echo -e "Creates library newLib.a containing object file obj1.o, all object files from lib1.a and lib2.a, and the object file obj2.o"
}

function cleanUp() {
    rm -rf ${WORK_DIR}
}


function archTempDir() {
    ARCHIVE_DIR=`dirname $1`
    ## replace .. with xx
    TR_ARCHIVE_DIR=`echo ${ARCHIVE_DIR} | tr . x`
    ## add XX at the head to deal with absolute paths that start with "/"
    echo -n ${WORK_DIR}/XX${TR_ARCHIVE_DIR}
}

## Find the directory for temporary files on the current system
function findTmp() {
    USUAL_TEMPS="/tmp /temp /scratch"
    for POSS_TMP_DIR in ${USUAL_TEMPS}; do
	if [ -d ${POSS_TMP_DIR} ]; then
	    echo -n ${POSS_TMP_DIR}
	fi
    done
    echo -n ${ORIG_DIR}
}


if [ $# -lt 2 ]; then
  printUsage;
  exit 1;
fi

# directory we've been called from
ORIG_DIR=`pwd`

# TMP_DIR is the temporary directory on the current system (usually /tmp)
TMP_DIR=`findTmp`


# WORK_DIR is the root of our temporary directory tree
WORK_DIR=${TMP_DIR}/tmp-bal

mkdir -p $WORK_DIR || {
    echo Error creating working directory $WORK_DIR
    exit 2;
}


OUT_LIB_NAME=$1
case ${OUT_LIB_NAME} in 
    *.a)
	# good!
	;;
    *)
	echo Output lib name \(${OUT_LIB_NAME}\) does not have a trailing .a ...
	echo
	printUsage;
	exit 1;;
esac

shift;

IN_FILES=$*

echo -e "\nBuild ${OUT_LIB_NAME}.a from\n\t${IN_FILES}\nusing the temporary directory ${WORK_DIR}"


FILES_FOR_LIB=""

for FILE in ${IN_FILES}; do
    case $FILE in
	*.o) 
	    if [ ! -f $FILE ]; then
		echo FATAL: Object file $FILE does not exist\!
		cleanUp
		exit 3;
	    fi
	    FILES_FOR_LIB="${FILES_FOR_LIB} $FILE";;
	*.a) 
	    ARCHIVE_TMP_DIR=`archTempDir $FILE`
	    FULL_FILE=${ORIG_DIR}/${FILE}
	    echo Extract files from archive $FILE into ${ARCHIVE_TMP_DIR}
	    #echo ARCHIVE_TMP_DIR=${ARCHIVE_TMP_DIR}
	    #echo FULL_FILE=${FULL_FILE}

	    if [ ! -f ${FULL_FILE} ]; then 
		echo FATAL: Archive ${FILE} \(abs. path = ${FULL_FILE}\) does not exist ...
		cleanUp
		exit 4;
	    fi
	    mkdir -p ${ARCHIVE_TMP_DIR}
	    (cd ${ARCHIVE_TMP_DIR}; ar xv ${ORIG_DIR}/${FILE})
	    FILES_FOR_LIB="${FILES_FOR_LIB} ${ARCHIVE_TMP_DIR}/*"
	    ;;
	*  )
	    echo Don\'t know what to do with $FILE;
	    cleanUp
	    exit;;
    esac
done



echo FILES_FOR_LIB="${FILES_FOR_LIB}"

echo
echo Create ${OUT_LIB_NAME}
ar cruv ${OUT_LIB_NAME} ${FILES_FOR_LIB}
ranlib ${OUT_LIB_NAME}


echo Library ${OUT_LIB_NAME} is ready!
echo

cleanUp;
