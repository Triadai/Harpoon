# these are the root methods for Runtime1 (fun, ain't they?)
#######################################################################

## implicitly called during startup/shutdown:
java.lang.Thread.<init>(Ljava/lang/VMThread;Ljava/lang/String;IZ)V
java.lang.VMMain.<init>([Ljava/lang/String;)V
java.lang.VMMain.run()V
java.lang.VMThread.<init>(Ljava/lang/Thread;)V
java.lang.ThreadGroup.<init>()V
java.lang.ThreadGroup.addThread(Ljava/lang/Thread;)V

# this is the actual implementation used for any array clone method, so
# hack it into the hierarchy.
[Ljava/lang/Object;.clone()Ljava/lang/Object;

# the JNI implementation uses these
java.lang.NoClassDefFoundError.<init>(Ljava/lang/String;)V
java.lang.NoSuchMethodError.<init>(Ljava/lang/String;)V
java.lang.NoSuchFieldError.<init>(Ljava/lang/String;)V
java.lang.String.<init>([C)V
java.lang.String.length()I
java.lang.String.toCharArray()[C
java.lang.OutOfMemoryError.<init>(Ljava/lang/String;)V

# the runtime's reflection implementation mentions these
# (and they are (statically) instantiated, so reference the
# constructors)
java.lang.Class.<init>()V
java.lang.reflect.Constructor.<init>()V
java.lang.reflect.Field.<init>()V
java.lang.reflect.Method.<init>()V

# reflection creates these (wrappers for primitive types)
# XXX: these should really only be marked callable when
# a call to Field.get() is found.  Eventually I'll update
# QuadClassHierarchy to handle these sorts of tricky
# dependencies.
java.lang.Boolean.<init>(Z)V
java.lang.Byte.<init>(B)V
java.lang.Character.<init>(C)V
java.lang.Short.<init>(S)V
java.lang.Integer.<init>(I)V
java.lang.Long.<init>(J)V
java.lang.Float.<init>(F)V
java.lang.Double.<init>(D)V

# FNI_ExceptionDescribe uses this
java.lang.Throwable.toString()Ljava/lang/String;

# in java.io implementations
java.io.IOException.<init>()V
java.io.IOException.<init>(Ljava/lang/String;)V

# in java.lang implementations
java.lang.ArrayIndexOutOfBoundsException.<init>(Ljava/lang/String;)V
java.lang.ArrayStoreException.<init>(Ljava/lang/String;)V
java.lang.ClassNotFoundException.<init>(Ljava/lang/String;)V
java.lang.InstantiationException.<init>(Ljava/lang/String;)V # by Class.newInstance()
# thrown by impl of Class.getField()
java.lang.NoSuchFieldException.<init>(Ljava/lang/String;)V
# thrown by impl of Class.getMethod() and Class.getConstructor()
java.lang.NoSuchMethodException.<init>(Ljava/lang/String;)V

#   JDK1.2-and-up:
java.util.Properties.setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
#   the old sunjdk used this JDK1.1-and-up version instead:
#      java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
#   java.lang.Throwable.printStackTrace0 uses println([C) of whatever
#   object it is passed.  let's assume that it's java.io.PrintStream
#   (for System.out/System.err)

#java.io.PrintStream.println([C)V # NATIVE IMPL IN CLASSPATH

# in java.net implementations.
#   in static initializer or java.net.InetAddress
#java.net.InetAddressImpl.<init>()V

# default encoding/decoding used by gnu.java.io.EncodingManager
gnu.java.io.decode.Decoder8859_1.<init>(Ljava/io/InputStream;)V
gnu.java.io.encode.Encoder8859_1.<init>(Ljava/io/OutputStream;)V

gnu.java.lang.SystemClassLoader.<init>(Ljava/lang/ClassLoader;)V

#[can avoid having the following roots by:
# a) hacking java.util.ResourceBundle.security initialization so that
#    it doesn't instantiate a subclass of SecurityManager
# b) hacking java.lang.Class.memberAccessCheck so that it doesn't
#    call sm.checkPackageAccess() [if a is done, the classhierarchy
#    will recognize that this method is unreachable]
# c) hacking java.lang.SecurityManager.checkPackageList so
#    that it doesn't access Security.getProperty()
# BUT INSTEAD we're going to go ahead and create the
# gnu.java.security.provider.Gnu class.]
############ start avoidable roots
# default URL protocol handlers; loaded in java.net.URL.getURLStreamHandler()
# (which is invoked by java.net.URL() constructor)
gnu.java.net.protocol.file.Handler.<init>()V
# [AS] you may consider the following too
#gnu.java.net.protocol.http.Handler.<init>()V
#gnu.java.net.protocol.jar.Handler.<init>()V
# see class-root.properties for other files referenced by
# gnu.java.security.provider.Gnu
############ end avoidable roots

# for better debugging...
java.lang.reflect.InvocationTargetException.<init>(Ljava/lang/Throwable;)V

java.io.FileDescriptor.<init>()V
java.io.FileDescriptor.<init>(J)V

################################################ that's all!
