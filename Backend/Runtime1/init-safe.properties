# Set of safe native methods.
java.io.File.createInternal(Ljava/lang/String;)Z=java.io.IOException
java.io.File.canReadInternal(Ljava/lang/String;)Z=
java.io.File.canWriteInternal(Ljava/lang/String;)Z=
java.io.File.setReadOnlyInternal(Ljava/lang/String;)Z=
java.io.File.existsInternal(Ljava/lang/String;)Z=
java.io.File.isFileInternal(Ljava/lang/String;)Z=
java.io.File.isDirectoryInternal(Ljava/lang/String;)Z=
java.io.File.lengthInternal(Ljava/lang/String;)J=
java.io.File.lastModifiedInternal(Ljava/lang/String;)J=
java.io.File.setLastModifiedInternal(Ljava/lang/String;J)Z=
java.io.File.deleteInternal(Ljava/lang/String;)Z=
java.io.File.mkdirInternal(Ljava/lang/String;)Z=
java.io.File.renameToInternal(Ljava/lang/String;Ljava/lang/String;)Z=
java.io.File.listInternal(Ljava/lang/String;)[Ljava/lang/String;=[Ljava/lang/String; java.lang.String

java.io.FileDescriptor.syncInternal(I)V=java.io.IOException
java.io.FileDescriptor.validInternal(I)Z=

java.io.FileInputStream.getFileLength(I)J=java.io.IOException
java.io.FileInputStream.skipInternal(IJ)J=java.io.IOException
java.io.FileInputStream.open(Ljava/lang/String;)I=java.io.FileNotFoundException java.io.IOException
java.io.FileInputStream.readInternal(I[BII)I=java.io.IOException
java.io.FileInputStream.closeInternal(I)V=java.io.IOException

java.io.FileOutputStream.open(Ljava/lang/String;Z)I=java.io.FileNotFoundException java.io.IOException
java.io.FileOutputStream.writeInternal(I[BII)V=java.io.IOException
java.io.FileOutputStream.closeInternal(I)V=java.io.IOException

# SKIPPING java.io.ObjectInputStream UNSAFE
# SKIPPING java.io.ObjectOutputStream UNSAFE

java.io.RandomAccessFile.lengthInternal(I)J=java.io.IOException
java.io.RandomAccessFile.skipInternal(II)I=java.io.IOException
java.io.RandomAccessFile.open(Ljava/lang/String;Z)I=java.io.FileNotFoundException java.io.IOException
java.io.RandomAccessFile.closeInternal(I)V=java.io.IOException
java.io.RandomAccessFile.readInternal(I[BII)I=java.io.IOException
java.io.RandomAccessFile.writeInternal(I[BII)V=java.io.IOException
java.io.RandomAccessFile.getFilePointerInternal(I)J=java.io.IOException
java.io.RandomAccessFile.seekInternal(IJ)V=java.io.IOException
java.io.RandomAccessFile.setLengthInternal(IJ)V=java.io.IOException

java.lang.Class.isInstance(Ljava/lang/Object;)Z=
java.lang.Class.isAssignableFrom(Ljava/lang/Class;)Z=
java.lang.Class.isInterface()Z=
java.lang.Class.isArray()Z=
java.lang.Class.isPrimitive()Z=
java.lang.Class.getName()Ljava/lang/String;=java.lang.String
# methods which return Classes are safe, as existence of a Class does not
# imply that the represented class has been statically initialized.
# also, we assume that java.lang.Class has been initialized if you are
# calling methods in it.
java.lang.Class.getSuperclass()Ljava/lang/Class;=
java.lang.Class.getInterfaces()[Ljava/lang/Class;=
java.lang.Class.getComponentType()Ljava/lang/Class;=
java.lang.Class.getModifiers()I=
java.lang.Class.getDeclaringClass()Ljava/lang/Class;=
java.lang.Class.getClasses()[Ljava/lang/Class;=
java.lang.Class.getFields()[Ljava/lang/reflect/Field;=java.lang.reflect.Field
java.lang.Class.getMethods()[Ljava/lang/reflect/Method;=java.lang.reflect.Method
java.lang.Class.getConstructors()[Ljava/lang/reflect/Constructor;=java.lang.reflect.Constructor
java.lang.Class.getField(Ljava/lang/String;)Ljava/lang/reflect/Field;=java.lang.reflect.Field
java.lang.Class.getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;=java.lang.reflect.Method
java.lang.Class.getConstructor([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;=java.lang.reflect.Constructor
java.lang.Class.getDeclaredClasses()[Ljava/lang/Class;=
java.lang.Class.getDeclaredFields()[Ljava/lang/reflect/Field;=java.lang.reflect.Field
java.lang.Class.getDeclaredMethods()[Ljava/lang/reflect/Method;=java.lang.reflect.Method
java.lang.Class.getDeclaredConstructors()[Ljava/lang/reflect/Constructor;=java.lang.reflect.Constructor
java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;=java.lang.reflect.Field
java.lang.Class.getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;=java.lang.reflect.Method
java.lang.Class.getDeclaredConstructor([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;=java.lang.reflect.Constructor

java.lang.Double.initIDs()V=
java.lang.Double.doubleToLongBits(D)J=
java.lang.Double.doubleToRawLongBits(D)J=
java.lang.Double.longBitsToDouble(J)D=
java.lang.Double.toString(DZ)Ljava/lang/String;=java.lang.String
java.lang.Double.parseDouble(Ljava/lang/String;)D=java.lang.NullPointerException java.lang.NumberFormatException

java.lang.Float.floatToIntBits(F)I=
java.lang.Float.floatToRawIntBits(F)I=
java.lang.Float.intBitsToFloat(I)F=

java.lang.Math.acos(D)D=
java.lang.Math.asin(D)D=
java.lang.Math.atan(D)D=
java.lang.Math.atan2(DD)D=
java.lang.Math.ceil(D)D=
java.lang.Math.cos(D)D=
java.lang.Math.exp(D)D=
java.lang.Math.floor(D)D=
java.lang.Math.IEEEremainder(DD)D=
java.lang.Math.log(D)D=
java.lang.Math.pow(DD)D=
java.lang.Math.rint(D)D=
java.lang.Math.sin(D)D=
java.lang.Math.sqrt(D)D=
java.lang.Math.tan(D)D=

java.lang.Object.getClass()Ljava/lang/Class;=java.lang.Class

java.lang.Runtime.availableProcessors()I=
java.lang.Runtime.freeMemory()J=
java.lang.Runtime.totalMemory()J=
java.lang.Runtime.maxMemory()J=
java.lang.Runtime.gc()V=
java.lang.Runtime.traceInstructions(Z)V=
java.lang.Runtime.traceMethodCalls(Z)V=
java.lang.Runtime.runFinalizersOnExitInternal(Z)V=
java.lang.Runtime.exitInternal(I)V=
#### are these really safe?
#java.lang.Runtime.runFinalization()V=
#java.lang.Runtime.nativeLoad(Ljava/lang/String;)I=
#java.lang.Runtime.nativeGetLibname(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;=java.lang.String
#java.lang.Runtime.execInternal([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;=java.lang.Process
#java.lang.Runtime.insertSystemProperties(Ljava/util/Properties;)V=
#### end of questionable methods
java.lang.System.setIn0(Ljava/io/InputStream;)V=
java.lang.System.setOut0(Ljava/io/PrintStream;)V=
java.lang.System.setErr0(Ljava/io/PrintStream;)V=
java.lang.System.currentTimeMillis()J=
java.lang.System.isWordsBigEndian()Z=
java.lang.Throwable.fillInStackTrace()Ljava/lang/Throwable;=
#java.lang.Throwable.printStackTrace0(Ljava/io/PrintWriter;)V=
java.lang.VMObject.clone(Ljava/lang/Cloneable;)Ljava/lang/Object;=
[Ljava/lang/Object;.clone()Ljava/lang/Object;=
[Z.clone()Ljava/lang/Object;=
[B.clone()Ljava/lang/Object;=
[S.clone()Ljava/lang/Object;=
[I.clone()Ljava/lang/Object;=
[J.clone()Ljava/lang/Object;=
[F.clone()Ljava/lang/Object;=
[D.clone()Ljava/lang/Object;=
[C.clone()Ljava/lang/Object;=
java.lang.VMObject.getClass(Ljava/lang/Object;)Ljava/lang/Class;=java.lang.Class
java.lang.VMObject.notify(Ljava/lang/Object;)V=
java.lang.VMObject.notifyAll(Ljava/lang/Object;)V=
java.lang.VMObject.wait(Ljava/lang/Object;JI)V=
java.lang.VMSystem.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V=
java.lang.VMSystem.identityHashCode(Ljava/lang/Object;)I=
java.lang.reflect.Array.getLength(Ljava/lang/Object;)I=
# safe because calling convention requires us to provide
# the class object for the array type, and that would have caused
# the class to be initialized? (NO, class object doesn't require static init)
#java.lang.reflect.Array.createObjectArray(Ljava/lang/Class;I)Ljava/lang/Object;=
java.lang.reflect.Field.getDeclaringClass()=java.lang.Class
java.lang.reflect.Field.getModifiers()=
java.lang.reflect.Field.getName()=java.lang.String
java.lang.reflect.Field.getType()=java.lang.Class
java.lang.reflect.Method.getDeclaringClass()=java.lang.Class
java.lang.reflect.Method.getExceptionTypes()=java.lang.Class
java.lang.reflect.Method.getModifiers()=
java.lang.reflect.Method.getName()=java.lang.String
java.lang.reflect.Method.getParameterTypes()=java.lang.Class
java.lang.reflect.Method.getReturnType()=java.lang.Class
java.lang.reflect.Constructor.getDeclaringClass()=java.lang.Class
java.lang.reflect.Constructor.getExceptionTypes()=java.lang.Class
java.lang.reflect.Constructor.getModifiers()=
java.lang.reflect.Constructor.getName()=java.lang.String
java.lang.reflect.Constructor.getParameterTypes()=java.lang.Class
java.net.InetAddress.getLocalHostName()Ljava/lang/String;=java.lang.String
java.net.InetAddress.lookupInaddrAny()[I=java.net.UnknownHostException
java.net.InetAddress.getHostByAddr([I)Ljava/lang/String;=java.net.UnknownHostException java.lang.String [I
java.net.InetAddress.getHostByName(Ljava/lang/String;)[[I=java.net.UnknownHostException [I [[I

java.net.PlainSocketImpl.create(Z)V=java.io.IOException
java.net.PlainSocketImpl.close()V=
java.net.PlainSocketImpl.connect(Ljava/net/InetAddress;I)V=java.io.IOException
java.net.PlainSocketImpl.bind(Ljava/net/InetAddress;I)V=java.io.IOException
java.net.PlainSocketImpl.listen(I)V=java.io.IOException
java.net.PlainSocketImpl.accept(Ljava/net/SocketImpl;)V=java.io.IOException
java.net.PlainSocketImpl.setOption(ILjava/lang/Object;)V=java.io.IOException java.net.SocketException
java.net.PlainSocketImpl.getOption(I)Ljava/lang/Object;=java.io.IOException java.net.SocketException java.lang.Integer java.lang.Boolean java.net.InetAddress
java.net.PlainSocketImpl.read([BII)I=java.io.IOException
java.net.PlainSocketImpl.write([BII)V=java.io.IOException

java.net.PlainDatagramSocketImpl.create()V=java.io.IOException
java.net.PlainDatagramSocketImpl.close()V=
java.net.PlainDatagramSocketImpl.bind(ILjava/net/InetAddress;)V=java.io.IOException
java.net.PlainDatagramSocketImpl.setOption(ILjava/lang/Object;)V=java.io.IOException java.net.SocketException
java.net.PlainDatagramSocketImpl.getOption(I)Ljava/lang/Object;=java.io.IOException java.net.SocketException java.lang.Integer java.lang.Boolean java.net.InetAddress
java.net.PlainDatagramSocketImpl.receive(Ljava/net/DatagramPacket;)V=java.io.IOException java.lang.String
java.net.PlainDatagramSocketImpl.sendto(Ljava/net/InetAddress;I[BI)V=java.io.IOException
java.net.PlainDatagramSocketImpl.join(Ljava/net/InetAddress;)V=java.io.IOException
java.net.PlainDatagramSocketImpl.leave(Ljava/net/InetAddress;)V=java.io.IOException

java.util.TimeZone.getDefaultTimeZoneId()Ljava/lang/String;=

#### unverified against classpath implementations ####
#### (because the implementations don't exist yet) ####
#java.lang.ClassLoader.findSystemClass0(Ljava/lang/String;)Ljava/lang/Class;=java.lang.Class
#java.lang.ClassLoader.getSystemResourceAsStream0(Ljava/lang/String;)Ljava/io/InputStream;=
#java.lang.ClassLoader.getSystemResourceAsName0(Ljava/lang/String;)Ljava/lang/String;=
# ClassLoader.init is unimplemented.
#java.lang.ClassLoader.init()V=
#java.lang.ClassLoader.resolveClass0(Ljava/lang/Class;)V= #not sure this is safe
java.lang.Thread.currentThread()Ljava/lang/Thread;=java.lang.Thread
#java.lang.Thread.interrupt0()V=
java.lang.Thread.isAlive()Z=
#java.lang.Thread.isInterrupted(Z)Z=
#java.lang.Thread.setPriority0(I)V=
java.lang.Thread.sleep(J)V=
java.lang.Thread.start()V=java.lang.IllegalThreadStateException
