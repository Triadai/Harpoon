# Set of safe native methods.
java.io.File.createInternal(Ljava/lang/String;)Z=java.io.IOException
java.io.File.canReadInternal(Ljava/lang/String;)Z=
java.io.File.canWriteInternal(Ljava/lang/String;)Z=
java.io.File.setReadOnlyInternal(Ljava/lang/String;)Z=
java.io.File.existsInternal(Ljava/lang/String;)Z=
java.io.File.isFileInternal(Ljava/lang/String;)Z=
java.io.File.isDirectoryInternal(Ljava/lang/String;)Z=
java.io.File.lengthInternal(Ljava/lang/String;)J=
java.io.File.lastModifiedInternal(Ljava/lang/String;)J=
java.io.File.setLastModifiedInternal(Ljava/lang/String;J)Z=
java.io.File.deleteInternal(Ljava/lang/String;)Z=
java.io.File.mkdirInternal(Ljava/lang/String;)Z=
java.io.File.renameToInternal(Ljava/lang/String;Ljava/lang/String;)Z=
java.io.File.listInternal(Ljava/lang/String;)[Ljava/lang/String;=[Ljava/lang/String; java.lang.String

java.io.ObjectInputStream.callConstructor(Ljava/lang/Class;Ljava/lang/Object;)V=
java.io.ObjectInputStream.currentClassLoader(Ljava/lang/SecurityManager;)Ljava/lang/ClassLoader;=
#java.io.ObjectInputStream.setBooleanField(Ljava/lang/Object;Ljava/lang/String;Z)V=
#java.io.ObjectInputStream.setByteField(Ljava/lang/Object;Ljava/lang/String;B)V=
#java.io.ObjectInputStream.setCharField(Ljava/lang/Object;Ljava/lang/String;C)V=
#java.io.ObjectInputStream.setDoubleField(Ljava/lang/Object;Ljava/lang/String;D)V=
#java.io.ObjectInputStream.setFloatField(Ljava/lang/Object;Ljava/lang/String;F)V=
#java.io.ObjectInputStream.setIntField(Ljava/lang/Object;Ljava/lang/String;I)V=
#java.io.ObjectInputStream.setLongField(Ljava/lang/Object;Ljava/lang/String;J)V=
#java.io.ObjectInputStream.setObjectField(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V=
#java.io.ObjectInputStream.setShortField(Ljava/lang/Object;Ljava/lang/String;S)V=
#java.io.ObjectInputStream.callReadMethod(Ljava/lang/Object;Ljava/lang/Class;)V=

# SKIPPING java.io.ObjectOutputStream UNSAFE

#java.io.RandomAccessFile.lengthInternal(I)J=java.io.IOException
#java.io.RandomAccessFile.skipInternal(II)I=java.io.IOException
#java.io.RandomAccessFile.open(Ljava/lang/String;Z)I=java.io.FileNotFoundException java.io.IOException
#java.io.RandomAccessFile.closeInternal(I)V=java.io.IOException
#java.io.RandomAccessFile.readInternal(I[BII)I=java.io.IOException
#java.io.RandomAccessFile.writeInternal(I[BII)V=java.io.IOException
#java.io.RandomAccessFile.getFilePointerInternal(I)J=java.io.IOException
#java.io.RandomAccessFile.seekInternal(IJ)V=java.io.IOException
#java.io.RandomAccessFile.setLengthInternal(IJ)V=java.io.IOException

java.io.VMObjectStreamClass.hasClassInitializer(Ljava/lang/Class;)Z=

java.lang.Class.isInstance(Ljava/lang/Object;)Z=
java.lang.Class.isAssignableFrom(Ljava/lang/Class;)Z=
java.lang.Class.isInterface()Z=
java.lang.Class.isArray()Z=
java.lang.Class.isPrimitive()Z=
java.lang.Class.getName()Ljava/lang/String;=java.lang.String
# methods which return Classes are safe, as existence of a Class does not
# imply that the represented class has been statically initialized.
# also, we assume that java.lang.Class has been initialized if you are
# calling methods in it.
java.lang.Class.getSuperclass()Ljava/lang/Class;=
java.lang.Class.getInterfaces()[Ljava/lang/Class;=
java.lang.Class.getComponentType()Ljava/lang/Class;=
java.lang.Class.getModifiers()I=
java.lang.Class.getDeclaringClass()Ljava/lang/Class;=
java.lang.Class.getDeclaredClasses(Z)[Ljava/lang/Class;=
java.lang.Class.getDeclaredFields(Z)[Ljava/lang/reflect/Field;=java.lang.reflect.Field
java.lang.Class.getDeclaredMethods(Z)[Ljava/lang/reflect/Method;=java.lang.reflect.Method
java.lang.Class.getDeclaredConstructors(Z)[Ljava/lang/reflect/Constructor;=java.lang.reflect.Constructor
# helper method, classpath 0.08
java.lang.Class.throwException(Ljava/lang/Throwable;)V=

java.lang.Double.initIDs()V=
java.lang.Double.doubleToLongBits(D)J=
java.lang.Double.doubleToRawLongBits(D)J=
java.lang.Double.longBitsToDouble(J)D=
java.lang.Double.toString(DZ)Ljava/lang/String;=java.lang.String
java.lang.Double.parseDouble(Ljava/lang/String;)D=java.lang.NullPointerException java.lang.NumberFormatException

java.lang.Float.floatToIntBits(F)I=
java.lang.Float.floatToRawIntBits(F)I=
java.lang.Float.intBitsToFloat(I)F=

java.lang.Math.acos(D)D=
java.lang.Math.asin(D)D=
java.lang.Math.atan(D)D=
java.lang.Math.atan2(DD)D=
java.lang.Math.ceil(D)D=
java.lang.Math.cos(D)D=
java.lang.Math.exp(D)D=
java.lang.Math.floor(D)D=
java.lang.Math.IEEEremainder(DD)D=
java.lang.Math.log(D)D=
java.lang.Math.pow(DD)D=
java.lang.Math.rint(D)D=
java.lang.Math.sin(D)D=
java.lang.Math.sqrt(D)D=
java.lang.Math.tan(D)D=

java.lang.Object.getClass()Ljava/lang/Class;=java.lang.Class

java.lang.VMRuntime.availableProcessors()I=
java.lang.VMRuntime.freeMemory()J=
java.lang.VMRuntime.totalMemory()J=
java.lang.VMRuntime.maxMemory()J=
java.lang.VMRuntime.gc()V=
java.lang.VMRuntime.traceInstructions(Z)V=
java.lang.VMRuntime.traceMethodCalls(Z)V=
java.lang.VMRuntime.runFinalizersOnExit(Z)V=
java.lang.VMRuntime.exit(I)V=
java.lang.VMRuntime.insertSystemProperties(Ljava/util/Properties;)V=java.lang.String
#### are these really safe?

## [AS] it's anyway unimplemented, so we can declare it safe and pray it's not invoked!
java.lang.VMRuntime.exec([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;=java.lang.Process

#### end of questionable methods
java.lang.System.setIn(Ljava/io/InputStream;)V=
java.lang.System.setOut(Ljava/io/PrintStream;)V=
java.lang.System.setErr(Ljava/io/PrintStream;)V=
java.lang.System.currentTimeMillis()J=

java.lang.VMThread.currentThread()Ljava/lang/Thread;=
java.lang.VMThread.yield()V=
java.lang.VMThread.sleep(JI)V=
#java.lang.VMThread.start()V=#UNSAFE. must hold thread until static init is done.
java.lang.VMThread.interrupted()Z=
java.lang.VMThread.isInterrupted()Z=
java.lang.VMThread.holdsLock(Ljava/lang/Object;)Z=
java.lang.VMThread.nativeStop(Ljava/lang/Throwable;)V=
java.lang.VMThread.interrupt()V=
java.lang.VMThread.suspend()V=
java.lang.VMThread.resume()V=
java.lang.VMThread.nativeSetPriority(I)V=

java.lang.Throwable.fillInStackTrace()Ljava/lang/Throwable;=

java.lang.VMClassLoader.getPrimitiveClass(Ljava/lang/String;)Ljava/lang/Class;=java.lang.Class

java.lang.VMObject.clone(Ljava/lang/Cloneable;)Ljava/lang/Object;=
[Ljava/lang/Object;.clone()Ljava/lang/Object;=
[Z.clone()Ljava/lang/Object;=
[B.clone()Ljava/lang/Object;=
[S.clone()Ljava/lang/Object;=
[I.clone()Ljava/lang/Object;=
[J.clone()Ljava/lang/Object;=
[F.clone()Ljava/lang/Object;=
[D.clone()Ljava/lang/Object;=
[C.clone()Ljava/lang/Object;=

java.lang.VMObject.notify(Ljava/lang/Object;)V=
java.lang.VMObject.notifyAll(Ljava/lang/Object;)V=
java.lang.VMObject.wait(Ljava/lang/Object;JI)V=

java.lang.VMRuntime.nativeGetLibname(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;=java.lang.String
java.lang.VMRuntime.nativeLoad(Ljava/lang/String;)I=

java.lang.VMSecurityManager.getClassContext()[Ljava/lang/Class;=java.lang.Class
java.lang.VMSecurityManager.currentClassLoader()Ljava/lang/ClassLoader;=java.lang.ClassLoader

java.lang.VMSystem.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V=
java.lang.VMSystem.identityHashCode(Ljava/lang/Object;)I=
java.lang.VMSystem.isWordsBigEndian()Z=
java.lang.reflect.Array.getLength(Ljava/lang/Object;)I=
# safe because calling convention requires us to provide
# the class object for the array type, and that would have caused
# the class to be initialized? (NO, class object doesn't require static init)
#java.lang.reflect.Array.createObjectArray(Ljava/lang/Class;I)Ljava/lang/Object;=
java.lang.reflect.Field.getDeclaringClass()=java.lang.Class
java.lang.reflect.Field.getModifiers()=
java.lang.reflect.Field.getName()=java.lang.String
java.lang.reflect.Field.getType()=java.lang.Class
java.lang.reflect.Method.getDeclaringClass()=java.lang.Class
java.lang.reflect.Method.getExceptionTypes()=java.lang.Class
java.lang.reflect.Method.getModifiers()=
java.lang.reflect.Method.getName()=java.lang.String
java.lang.reflect.Method.getParameterTypes()=java.lang.Class
java.lang.reflect.Method.getReturnType()=java.lang.Class
java.lang.reflect.Constructor.getDeclaringClass()=java.lang.Class
java.lang.reflect.Constructor.getExceptionTypes()=java.lang.Class
java.lang.reflect.Constructor.getModifiers()=
java.lang.reflect.Constructor.getName()=java.lang.String
java.lang.reflect.Constructor.getParameterTypes()=java.lang.Class
java.net.InetAddress.getLocalHostname()Ljava/lang/String;=java.lang.String
java.net.InetAddress.lookupInaddrAny()[B=java.net.UnknownHostException
java.net.InetAddress.getHostByAddr([B)Ljava/lang/String;=java.net.UnknownHostException java.lang.String [I
java.net.InetAddress.getHostByName(Ljava/lang/String;)[[B=java.net.UnknownHostException [I [[I

gnu.java.net.PlainSocketImpl.create(Z)V=java.io.IOException
gnu.java.net.PlainSocketImpl.close()V=
gnu.java.net.PlainSocketImpl.connect(Ljava/net/InetAddress;I)V=java.io.IOException
gnu.java.net.PlainSocketImpl.bind(Ljava/net/InetAddress;I)V=java.io.IOException
gnu.java.net.PlainSocketImpl.listen(I)V=java.io.IOException
gnu.java.net.PlainSocketImpl.accept(Ljava/net/SocketImpl;)V=java.io.IOException
gnu.java.net.PlainSocketImpl.setOption(ILjava/lang/Object;)V=java.io.IOException java.net.SocketException
gnu.java.net.PlainSocketImpl.getOption(I)Ljava/lang/Object;=java.io.IOException java.net.SocketException java.lang.Integer java.lang.Boolean java.net.InetAddress
gnu.java.net.PlainSocketImpl.read([BII)I=java.io.IOException
gnu.java.net.PlainSocketImpl.write([BII)V=java.io.IOException
gnu.java.net.PlainSocketImpl.available()I=

gnu.java.net.PlainDatagramSocketImpl.create()V=java.io.IOException
gnu.java.net.PlainDatagramSocketImpl.close()V=
gnu.java.net.PlainDatagramSocketImpl.bind(ILjava/net/InetAddress;)V=java.io.IOException
gnu.java.net.PlainDatagramSocketImpl.setOption(ILjava/lang/Object;)V=java.io.IOException java.net.SocketException
gnu.java.net.PlainDatagramSocketImpl.getOption(I)Ljava/lang/Object;=java.io.IOException java.net.SocketException java.lang.Integer java.lang.Boolean java.net.InetAddress
gnu.java.net.PlainDatagramSocketImpl.receive0(Ljava/net/DatagramPacket;)V=java.io.IOException java.lang.String
gnu.java.net.PlainDatagramSocketImpl.sendto(Ljava/net/InetAddress;I[BII)V=java.io.IOException
gnu.java.net.PlainDatagramSocketImpl.join(Ljava/net/InetAddress;)V=java.io.IOException
gnu.java.net.PlainDatagramSocketImpl.leave(Ljava/net/InetAddress;)V=java.io.IOException

java.util.TimeZone.getDefaultTimeZoneId()Ljava/lang/String;=

# # Check the following out - are they REALLY initsafe?
# gnu.java.awt.peer.gtk.GtkButtonPeer.create()V=
# gnu.java.awt.peer.gtk.GtkButtonPeer.gtkSetFont(Ljava/lang/String;I)V=
# gnu.java.awt.peer.gtk.GtkCanvasPeer.create()V=
# gnu.java.awt.peer.gtk.GtkCheckboxGroupPeer.remove(Lgnu/java/awt/peer/gtk/GtkCheckboxPeer;)V=
# gnu.java.awt.peer.gtk.GtkCheckboxPeer.connectHooks()V=
# gnu.java.awt.peer.gtk.GtkCheckboxPeer.nativeCreate(Lgnu/java/awt/peer/gtk/GtkCheckboxGroupPeer;)V=
# gnu.java.awt.peer.gtk.GtkChoicePeer.create()V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.connectHooks()V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.gtkWidgetGetBackground()[I=
# gnu.java.awt.peer.gtk.GtkComponentPeer.gtkWidgetGetDimensions([I)V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.gtkWidgetGetForeground()[I=
# gnu.java.awt.peer.gtk.GtkComponentPeer.gtkWidgetSetCursor(I)V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.requestFocus()V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.set(Ljava/lang/String;F)V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.set(Ljava/lang/String;I)V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.set(Ljava/lang/String;Ljava/lang/Object;)V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.set(Ljava/lang/String;Ljava/lang/String;)V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.set(Ljava/lang/String;Z)V=
# gnu.java.awt.peer.gtk.GtkComponentPeer.setNativeBounds(IIII)V=
# gnu.java.awt.peer.gtk.GtkGenericPeer.dispose()V=
# gnu.java.awt.peer.gtk.GtkLabelPeer.create()V=
# gnu.java.awt.peer.gtk.GtkListPeer.connectHooks()V=
# gnu.java.awt.peer.gtk.GtkListPeer.create()V=
# gnu.java.awt.peer.gtk.GtkPanelPeer.connectHooks()V=
# gnu.java.awt.peer.gtk.GtkPanelPeer.create()V=
# gnu.java.awt.peer.gtk.GtkScrollbarPeer.connectHooks()V=
# gnu.java.awt.peer.gtk.GtkScrollbarPeer.create(IIIIIII)V=
# gnu.java.awt.peer.gtk.GtkScrollPanePeer.create()V=
# gnu.java.awt.peer.gtk.GtkTextAreaPeer.create(I)V=
# gnu.java.awt.peer.gtk.GtkTextAreaPeer.gtkSetFont(Ljava/lang/String;I)V=
# gnu.java.awt.peer.gtk.GtkTextAreaPeer.gtkTextGetSize(II[I)V=
# gnu.java.awt.peer.gtk.GtkTextComponentPeer.getCaretPosition()I=
# gnu.java.awt.peer.gtk.GtkTextComponentPeer.getText()Ljava/lang/String;=
# gnu.java.awt.peer.gtk.GtkTextComponentPeer.setText(Ljava/lang/String;)V=
# gnu.java.awt.peer.gtk.GtkTextFieldPeer.create()V=
# gnu.java.awt.peer.gtk.GtkTextFieldPeer.gtkEntryGetSize(I[I)V=
# gnu.java.awt.peer.gtk.GtkTextFieldPeer.gtkSetFont(Ljava/lang/String;I)V=
# gnu.java.awt.peer.gtk.GtkTextFieldPeer.setEchoChar(C)V=
# gnu.java.awt.peer.gtk.GtkToolkit.getScreenSizeDimensions([I)V=
# gnu.java.awt.peer.gtk.GtkWindowPeer.connectHooks()V=
# gnu.java.awt.peer.gtk.GtkWindowPeer.create(I)V=
# gnu.java.awt.peer.gtk.GtkWindowPeer.setBounds(IIII)V=
# gnu.java.awt.peer.gtk.GtkWindowPeer.setResizable(Z)V=
# gnu.java.awt.peer.gtk.GtkWindowPeer.setVisible(Z)V=
# gnu.java.awt.peer.gtk.GtkWindowPeer.toFront()V=

java.io.FileDescriptor.nativeAvailable(J)I=
java.io.FileDescriptor.nativeClose(J)J=
java.io.FileDescriptor.nativeGetFilePointer(J)J=
java.io.FileDescriptor.nativeGetLength(J)J=
java.io.FileDescriptor.nativeInit()V=
java.io.FileDescriptor.nativeOpen(Ljava/lang/String;I)J=
java.io.FileDescriptor.nativeReadBuf(J[BII)I=
java.io.FileDescriptor.nativeReadByte(J)I=
java.io.FileDescriptor.nativeSeek(JJIZ)J=
java.io.FileDescriptor.nativeValid(J)Z=
java.io.FileDescriptor.nativeWriteBuf(J[BII)J=
java.io.FileDescriptor.nativeWriteByte(JI)J=

# For the servo controller - now in native code.
#ipaq.IPaqServoController.setup()V=
