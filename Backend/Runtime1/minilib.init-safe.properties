# Set of safe native methods.
java.lang.Class.isInstance(Ljava/lang/Object;)Z=
java.lang.Class.isAssignableFrom(Ljava/lang/Class;)Z=
java.lang.Class.isInterface()Z=
java.lang.Class.isArray()Z=
java.lang.Class.isPrimitive()Z=
java.lang.Class.getName()Ljava/lang/String;=java.lang.String
# methods which return Classes are safe, as existence of a Class does not
# imply that the represented class has been statically initialized.
# also, we assume that java.lang.Class has been initialized if you are
# calling methods in it.
java.lang.Class.getSuperclass()Ljava/lang/Class;=
java.lang.Class.getInterfaces()[Ljava/lang/Class;=
java.lang.Class.getComponentType()Ljava/lang/Class;=
java.lang.Class.getModifiers()I=
java.lang.Class.getDeclaringClass()Ljava/lang/Class;=
java.lang.Class.getClasses()[Ljava/lang/Class;=
java.lang.Class.getFields()[Ljava/lang/reflect/Field;=java.lang.reflect.Field
java.lang.Class.getMethods()[Ljava/lang/reflect/Method;=java.lang.reflect.Method
java.lang.Class.getConstructors()[Ljava/lang/reflect/Constructor;=java.lang.reflect.Constructor
java.lang.Class.getField(Ljava/lang/String;)Ljava/lang/reflect/Field;=java.lang.reflect.Field
java.lang.Class.getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;=java.lang.reflect.Method
java.lang.Class.getConstructor([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;=java.lang.reflect.Constructor
java.lang.Class.getDeclaredClasses()[Ljava/lang/Class;=
java.lang.Class.getDeclaredFields()[Ljava/lang/reflect/Field;=java.lang.reflect.Field
java.lang.Class.getDeclaredMethods()[Ljava/lang/reflect/Method;=java.lang.reflect.Method
java.lang.Class.getDeclaredConstructors()[Ljava/lang/reflect/Constructor;=java.lang.reflect.Constructor
java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;=java.lang.reflect.Field
java.lang.Class.getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;=java.lang.reflect.Method
java.lang.Class.getDeclaredConstructor([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;=java.lang.reflect.Constructor

java.lang.Object.getClass()Ljava/lang/Class;=java.lang.Class

java.lang.Thread.currentThread()Ljava/lang/Thread;=
java.lang.Thread.yield()V=
java.lang.Thread.sleep(JI)V=
#java.lang.Thread.start()V=#UNSAFE. must hold thread until static init is done.
java.lang.Thread.interrupted()Z=
java.lang.Thread.isInterrupted()Z=
java.lang.Thread.isAlive()Z=
java.lang.Thread.countStackFrames()I=
java.lang.Thread.holdsLock(Ljava/lang/Object;)Z=
java.lang.Thread.nativeInit(J)V=
java.lang.Thread.nativeStop(Ljava/lang/Throwable;)V=
java.lang.Thread.nativeInterrupt()V=
java.lang.Thread.nativeSuspend()V=
java.lang.Thread.nativeResume()V=
java.lang.Thread.nativeSetPriority(I)V=

java.lang.Throwable.fillInStackTrace()Ljava/lang/Throwable;=

java.lang.VMObject.clone(Ljava/lang/Cloneable;)Ljava/lang/Object;=
[Ljava/lang/Object;.clone()Ljava/lang/Object;=
[Z.clone()Ljava/lang/Object;=
[B.clone()Ljava/lang/Object;=
[S.clone()Ljava/lang/Object;=
[I.clone()Ljava/lang/Object;=
[J.clone()Ljava/lang/Object;=
[F.clone()Ljava/lang/Object;=
[D.clone()Ljava/lang/Object;=
[C.clone()Ljava/lang/Object;=
java.lang.VMObject.notify(Ljava/lang/Object;)V=
java.lang.VMObject.notifyAll(Ljava/lang/Object;)V=
java.lang.VMObject.wait(Ljava/lang/Object;JI)V=

java.lang.VMSystem.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V=
java.lang.VMSystem.currentTimeMillis()J=
java.lang.VMSystem.identityHashCode(Ljava/lang/Object;)I=
java.lang.VMSystem.isWordsBigEndian()Z=
