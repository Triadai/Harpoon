#!/bin/bash

# This is the script that does all the dirty work on the remote machine.

# Script variables

GOT_ERRORS=0   # No errors up to now
COMMAND_LINE_PARAMETERS=   # Keeps the command-line parameters for this benchmark
COMPILE_SUCCESS=1   # Did the benchmark compile successfully?

CONF_EACH_TEST=no   # configure for every test?
COMPILE=yes   # compile the benchmark?
COMPILE_STATS=yes   # generate compiling statistics?
LONG_COMPILE_STATS=no   # should the compiling statistics be long?
RUN=yes   # run the benchmark?
RUN_STATS=yes   # generate runtime statistics?
LONG_RUN_STATS=no   # should the runtime statistics be long?
RUN_ONLY_IF_COMPILED=no   # can we run the task even if it was not compiled?
ERRORS=yes   # log errors?
ERRORS_SHORT_PREFFIX=$RESULTS_DIR/errors_short   # a preffix for all short error files
ERRORS_SHORT_LINE=   # a line of text that will be written in the short errors file of this benchmark

# Beginning of script

echo "1" > $RUNNING_TASK_FILE

while [ "$1" != "" ]; do   # parsing the command-line parameters
    case "$1" in
	-conf-each-test=yes)
	    CONF_EACH_TEST=yes;;   # Reconfigure the machine with each test's specific options
	-conf-each-test=no)
	    CONF_EACH_TEST=no;;   # Use machine's default options for all tests; Default option
	-compile=yes)
	    COMPILE=yes;;   # Compile the task; Default option
	-compile=no)
	    COMPILE=no;;   # Do not compile the task
	-compile-stats=yes)
	    COMPILE_STATS=yes;;   # Generate compiling statistics; Default option
	-compile-stats=no)
	    COMPILE_STATS=no;;   # Do not generate compiling statistics
	-long-compile-stats=yes)
	    LONG_COMPILE_STATS=yes;;   # Generate long compiling-time reports
	-long-compile-stats=no)
	    LONG_COMPILE_STATS=no;;   # Generate short compiling-time reports; Default option
	-run=yes)
	    RUN=yes;;   # Run the task; Default option
	-run=no)
	    RUN=no;;   # Do not run the task
	-run-stats=yes)
	    RUN_STATS=yes;;   # Generate runtime statistics; Default option
	-run-stats=no)
	    RUN_STATS=no;;   # Do not generate runtime statistics
	-long-run-stats=yes)
	    LONG_RUN_STATS=yes;;   # Generate long runtime reports
	-long-run-stats=no)
	    LONG_RUN_STATS=no;;   # Generate short runtime reports; Default option
	-run-only-if-compiled=yes)
	    RUN_ONLY_IF_COMPILED=yes;;   # Cannot run the task if it was not previously compiled
	-run-only-if-compiled=no)
	    RUN_ONLY_IF_COMPILED=no;;   # The task can be run, even if it was not compiled; Default option
	-errors=yes)
	    ERRORS=yes;;   # Report errors; Default option
	-errors=no)
	    ERRORS=no;;   # Do not write any error message in $ERROR_FILE
	*)
	    COMMAND_LINE_PARAMETERS=$COMMAND_LINE_PARAMETERS" $1"
    esac

    shift   # getting next parameter
done

BENCHMARK=`echo $COMMAND_LINE_PARAMETERS | sed s/\ .*$// | sed s/,.*$//`   # Getting the benchmark
COMMAND=`echo $COMMAND_LINE_PARAMETERS | sed "s|$BENCHMARK||" | sed s/,// | sed s/,.*$//`   # Command which will run this benchmark
COMMAND_LINE_PARAMETERS=`echo $COMMAND_LINE_PARAMETERS | sed "s|$BENCHMARK||" | sed s/^.*,//`   # Command-line parameters that will pass to the executable

if [ "$COMMAND" == "" ]; then
    COMMAND="bin/build-precisec -m -t ALL_RTJ_PERF_THREADS"
fi

if [ "$ERRORS" == "no" -a -e $ERROR_FILE ]; then
    rm -f $ERROR_FILE
fi

# Writing a header in the $ERROR_FILE file

if [ "$ERRORS" == "yes" ]; then   # we want to log errors
    echo >> $ERROR_FILE
    echo $BENCHMARK >> $ERROR_FILE
    echo ---------------------- >> $ERROR_FILE
    echo >> $ERROR_FILE
fi

# Reconfiguring FLEX for this task

if [ "$CONF_EACH_TEST" == "yes" ]; then   # use specific configuration options for each test?
    ./remake-everything -clean -task=$BENCHMARK > /dev/null 2>&1
fi

# Trying to compile and run the benchmark

if [ "$BENCHMARK" == "" ]; then   # No bechmark given as a parameter
    GOT_ERRORS=1
    if [ "$ERRORS" == "yes" ]; then   # we want to log errors
	echo -e "./run-benchmark must be given a benchmark/script name as its first parameter." >> $ERROR_FILE
    fi
else
    if [ "$COMPILE" == "yes" ]; then   # compiling the benchmark...
	cd $FLEX_DIR
	if [ ! -f $BENCHMARK.java ]; then   # does the benchmark file exist?
	    ERRORS_SHORT_LINE="compile-error"
	    if [ "$ERRORS" == "yes" ]; then   # we want to log errors
		echo >> $ERROR_FILE
		echo -e "The file $BENCHMARK.java not found. Looking for the executable run$BENCHMARK or for the script $BENCHMARK..." >> $ERROR_FILE
	    fi
	else   # yes, the file $BENCHMARK.java exists
	    javac $BENCHMARK.java >> $COMPILING_RESULTS_FILE"_$BENCHMARK" 2>&1 || GOT_ERRORS=1
	    if [ $GOT_ERRORS -eq 1 ]; then   # the file $BENCHMARK.java contains some syntactic errors
		ERRORS_SHORT_LINE="compile-error"
		COMPILE_SUCCESS=0
		if [ "$ERRORS" == "yes" ]; then   # we want to log errors
		    echo >> $ERROR_FILE
		    echo -e "\"javac\" could not compile the file $BENCHMARK.java. Please check the correctness of the syntax of $BENCHMARK.java" >> $ERROR_FILE
		fi
	    else
		$COMMAND $BENCHMARK $BENCHMARK >> $COMPILING_RESULTS_FILE"_$BENCHMARK" 2>&1 || GOT_ERRORS=1
		if [ $GOT_ERRORS -eq 1 ]; then   # Did the benchmark compile without any error
		    ERRORS_SHORT_LINE="compile-error"
		    COMPILE_SUCCESS=0
		    if [ "$ERRORS" == "yes" ]; then   # we want to log errors
			echo -e "Benchmark $BENCHMARK did not compile." >> $ERROR_FILE

			if [ "$COMPILE_STATS" == "yes" ]; then   # we want compiling statistics
			    echo >> $ERROR_FILE
			    echo -e "Compiling report for benchmark $BENCHMARK." >> $ERROR_FILE
			    echo >> $ERROR_FILE
			    if [ -x $MAIN_TESTING_DIR/generate-report ]; then   # does the script ./generate-report exist?
				if [ "$LONG_COMPILE_STATS" == "yes" ]; then   # we want a long report
				    $MAIN_TESTING_DIR/generate-report $BENCHMARK -compile -long
				else   # we want a short report
				    $MAIN_TESTING_DIR/generate-report $BENCHMARK -compile -short
				fi
			    else
				if [ "$ERRORS" == "yes" ]; then   # we want to log errors
				    echo >> $ERROR_FILE
				    echo -e "Could not generate compiling statistics, because the script ./generate-report in directory \$MAIN_TESTING_DIR is missing." >> $ERROR_FILE
				fi
			    fi
			fi
		    fi
		else   # no compiling-time errors
		    ERRORS_SHORT_LINE="compile-success"
		    if [ "$ERRORS" == "yes" ]; then   # we want to log errors
			echo >> $ERROR_FILE
			echo -e "          Benchmark $BENCHMARK compiled without any error." >> $ERROR_FILE
		    fi
		fi   # if [ $GOT_ERRORS -eq 1 ]; then
	    fi   # if [ $GOT_ERRORS -eq 1 ]; then
	fi   # if [ ! -e $BENCHMARK.java ]; then
    else   # "$COMPILE" == "no"
	ERRORS_SHORT_LINE="compile-nothing"
	COMPILE_SUCCESS=0
	if [ "$ERRORS" == "yes" ]; then   # we want to log errors
	    echo >> $ERROR_FILE
	    echo "User chose not to compile the task." >> $ERROR_FILE
	fi
    fi   # if [ "$COMPILE" == "yes" ]; then

    if [ "$RUN" == "yes" ]; then   # should we run the task?
	if [ "$RUN_ONLY_IF_COMPILED" == "yes" -a $COMPILE_SUCCESS -eq 0 ]; then   # cannot run this task
	    ERRORS_SHORT_LINE=$ERRORS_SHORT_LINE":run-error"
	    if [ "$ERRORS" == "yes" ]; then   # we want to log errors
		echo "Cannot run task, because the source file could not be compiled." >> $ERROR_FILE
		echo >> $ERROR_FILE
	    fi

	    
	else
	    cd $FLEX_DIR/../Runtime
	    if [ -x run$BENCHMARK -a -x $BENCHMARK ]; then   # found both ./run$BENCHMARK executable and the $BENCHMARK executable/script
		if [ "$ERRORS" == "yes" ]; then   # we want to log errors
		    echo >> $ERROR_FILE
		    echo "          Found both ./run$BENCHMARK and $BENCHMARK executables. Priority given to ./run$BENCHMARK, but it is advisable to avoid this kind of name collisions." >> $ERROR_FILE
		fi
		echo "./run$BENCHMARK" >> "$TASKS_RUN_ON_THIS_MACHINE_FILE"   # we have to know what tasks were run on this machine
		./run$BENCHMARK $COMMAND_LINE_PARAMETERS >> $RUNNING_RESULTS_FILE"_"`echo $BENCHMARK | sed "s|^.*/||g"` 2>&1 || GOT_ERRORS=1   # giving priority to ./run$BENCHMARK
	    elif [ -x run$BENCHMARK ]; then   # found only ./run$BENCHMARK executable
		if [ "$ERRORS" == "yes"]; then   # we want to log errors
		    echo >> $ERROR_FILE
		    echo "          Found the executable ./run$BENCHMARK; running it..." >> $ERROR_FILE
		fi
		echo "./run$BENCHMARK" >> "$TASKS_RUN_ON_THIS_MACHINE_FILE"   # we have to know what tasks were run on this machine
		./run$BENCHMARK $COMMAND_LINE_PARAMETERS >> $RUNNING_RESULTS_FILE"_"`echo $BENCHMARK | sed "s|^.*/||g"` 2>&1 || GOT_ERRORS=1
	    elif [ -x $BENCHMARK ]; then   # found only ./$BENCHMARK executable
		if [ "$ERRORS" == "yes" ]; then
		    echo >> $ERROR_FILE
		    echo "          Found the executable $BENCHMARK; running it..." >> $ERROR_FILE
		fi
		echo "./$BENCHMARK" >> "$TASKS_RUN_ON_THIS_MACHINE_FILE"   # we have to know what tasks were run on this machine
		. $BENCHMARK $COMMAND_LINE_PARAMETERS >> $RUNNING_RESULTS_FILE"_"`echo $BENCHMARK | sed "s|^.*/||g"` 2>&1 || GOT_ERRORS=1
	    else   # did not find any of these files
		if [ "$ERRORS" == "yes" ]; then   # we want to log errors
		    echo >> $ERROR_FILE
		    echo "Neither ./run$BENCHMARK nor ./$BENCHMARK was found." >> $ERROR_FILE
		fi
		GOT_ERRORS=10   # the value 10 of GOT_ERRORS will be a mark that nothing was run
	    fi
	    if [ $GOT_ERRORS != 10 ]; then   # was anything executed?
		if [ $GOT_ERRORS -eq 1 ]; then   # Did the program end because of an error?
		    ERRORS_SHORT_LINE=$ERRORS_SHORT_LINE":run-error"
		    if [ "$ERRORS" == "yes" ]; then   # we want to log errors
			echo >> $ERROR_FILE
			echo -e "Benchmark $BENCHMARK finished its execution because of an error." >> $ERROR_FILE

			if [ "$RUN_STATS" == "yes" ]; then   # we want runtime statistics
			    echo >> $ERROR_FILE
			    echo -e "Runtime report for benchmark $BENCHMARK." >> $ERROR_FILE
			    echo >> $ERROR_FILE
			    if [ -x $MAIN_TESTING_DIR/generate-report ]; then   # does the script ./generate-report exist?
				if [ "$LONG_RUN_STATS" == "yes" ]; then   # we want a long report
				    $MAIN_TESTING_DIR/generate-report $BENCHMARK -run -long
				else   # we want a short report
				    $MAIN_TESTING_DIR/generate-report $BENCHMARK -run -short
				fi
			    else
				if [ "$ERRORS" == "yes" ]; then   # we want to log errors
				    echo >> $ERROR_FILE
				    echo -e "Could not generate runtime statistics, because the script ./generate-report in directory \$MAIN_TESTING_DIR is missing." >> $ERROR_FILE
				fi
			    fi
			fi
		    fi
		else
		    ERRORS_SHORT_LINE=$ERRORS_SHORT_LINE":run_success"
		    if [ "$ERRORS" == "yes" ]; then   # we want to log errors
			echo >> $ERROR_FILE
			echo -e "          Benchmark $BENCHMARK ran without throwing any error." >> $ERROR_FILE
		    fi
		fi
	    else   # Nothing was run, because the executable was not found
		ERRORS_SHORT_LINE=$ERRORS_SHORT_LINE":run-nothing"
	    fi
	fi
    else   # "$RUN" == "no"
	ERRORS_SHORT_LINE=$ERRORS_SHORT_LINE":run-nothing"
	echo >> $ERROR_FILE
	echo "User chose not to run the task." >> $ERROR_FILE
    fi
fi

echo $ERRORS_SHORT_LINE > $ERRORS_SHORT_PREFFIX"_"$BENCHMARK

echo "0" > $RUNNING_TASK_FILE   # This machine is free again and ready to accept another task

# End of script
