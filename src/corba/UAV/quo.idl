/*
 * =====================================================================
 * (c) Copyright 2001  BBNT Solutions, LLC
 * =====================================================================
 */

// quo.idl,v

#ifndef QUO_IDL
#define QUO_IDL

#ifdef HAS_SUN_IDLTOJAVA
#pragma javaPackage "com.bbn.quo"
#endif /* HAS_SUN_IDLTOJAVA */

#include "rss.idl"

module quo 
{

    typedef sequence<string> strings;

    /* ****************************************
     * Callback
     */

    interface Callback {
	// do not remove, even if not used.  someone 
	// doesn't like empty interfaces.
	oneway void sendMessage(in string msg);
    };

    typedef sequence<Callback> CallbackSeq;
    typedef sequence<CallbackSeq> CallbackSeqSeq;


    /* ****************************************
     * SignalEvent
     *
     * SignalEvents support passing of arbitrary name/value
     * pairs along with the event type's name 
     */

    struct Association {
	string key;
	double value;
    };

    typedef sequence<Association> AssociationSeq;

    struct SignalEvent {
	string eType;
	AssociationSeq properties;
    };


    /* ****************************************
     * Contract
     */

    typedef sequence<long> RegionSeq;

    interface Contract {
	// C++ functions
	void eval();
	RegionSeq  getCurrentRegion();
        strings getCurrentRegionName();

	// JAVA functions
	RegionSeq signalAndEvalAndGetCurrentRegion(in SignalEvent sig);
	RegionSeq signalAndEvalInThread(in SignalEvent sig);
	long getTotalEvalCount();
	long getRequestedEvalCount();
	long getRegionHitCount (in RegionSeq region);
    };

    /* ****************************************
     * SysCond
     */

    // Generall System Condition interface
    // All other system conditions must inherit 
    // from this interface
    interface SysCond {
	boolean isReady();
    };

    typedef sequence<SysCond> SysCondSeq;

    typedef sequence<SysCondSeq> SysCondSeqSeq;

    // System condition that holds primitive values
    // and has read-only access
    interface ReadOnlyValueSC : SysCond {
	readonly attribute boolean booleanValue;
	readonly attribute octet octetValue;
	readonly attribute char charValue;
	readonly attribute short shortValue;
	readonly attribute long longValue;
	readonly attribute long long longlongValue;
	readonly attribute float floatValue;
	readonly attribute double doubleValue;
	readonly attribute string stringValue;
    };


    // System condition that holds primitive values
    // and allows read/write access
    interface ValueSC : SysCond {
	// deprecated
	long getLong();
	void setLong(in long arg);

	attribute boolean booleanValue;
	attribute octet octetValue;
	attribute char charValue;
	attribute short shortValue;
	attribute long longValue;
	attribute long long longlongValue;
	attribute float floatValue;
	attribute double doubleValue;
	attribute string stringValue;
    }; 

    interface ValueSCCallback : ValueSC, Callback {
    };

    interface DataSC : ValueSC {
	// no operations (so far)
    };

    interface RSSListenerSC : ValueSC, rss::RSSListener {
    };

    interface ExpectedBandwidthSC : ValueSC {
	void setHosts(in string source, in string dest);
    };

    interface ExpectedCapacitySC : ValueSC {
	void setHosts(in string source, in string dest);
    };

    interface ExpectedMaxJipsSC : ValueSC {
	void setHost(in string host);
    };

    interface ExpectedAvailableJipsSC : ValueSC {
	void setHost(in string host);
    };

    interface Probe {
	void signal(in SignalEvent sig);
    };

    interface ProbeSC : SysCond, Probe {
    };


    // Monitor element as in the GoF pattern
    interface Monitor {
	boolean isPolling();
	void startPolling();
	void stopPolling();
	void setPollRate(in long rate_ms);
    };

    // system condition that implements
    // the Monitor pattern from the GoF book
    interface MonitorSC : ReadOnlyValueSC, Monitor {
    };

    interface RemoteValueSCMonitor : MonitorSC {
	void init(in ValueSC remote, in long initial);
    };




    interface SlidingWindowCounterSC : ValueSC {
      void setWindowSize (in long millisecs);
      void setAgility (in long millisecs);
      void increment ();
      long getCounter();
    };


    /* ****************************************
     * QuoKernel
     */


    // QuO runtime kernel
    // contains methods to instantiate contracts and 
    // system conditions, controll the debugging level,
    // and modify GUI behavior
    interface QuoKernel {

	// instantiate a Contract inside the kernel
	// appId    contract name
	// typeStr  fully qualified name of the contract class
	// scSeq    syscond parameters from CDL description
	// cbSeq    callback parameters from CDL description
	Contract bindContract(in string appId,
			      in string typeStr,
			      in SysCondSeq scSeq,
			      in CallbackSeq cbSeq);


        Contract bindContractWithSequences(in string appId,
                                           in string typeStr,
                                           in SysCondSeq scSeq,
                                           in SysCondSeqSeq scSeqSeq,
                                           in CallbackSeq cbSeq,
                                           in CallbackSeqSeq cbSeqSeq);

	// instantiate a single System Condition inside the kernel
	// appId         system condition name
	// idlInterface  fully qualified name of the syscond IDL type 
	// impcClass     fully qualified name of the implementation class
	SysCond bindSysCond(in string appId,
			    in string idlInterface,
			    in string implClass);

	void newFrame();
      
	void makeDataScope(in rss::Scopes path);

	void bindDataFormula(in DataSC syscond, 
			      in rss::Scopes path,
			      in string formula);

	void bindDataSymbol(in DataSC syscond, 
			    in rss::Scopes path,
			    in string symbol);

	boolean relateScopes(in string scope_relation,
			    in rss::Scopes from_scope,
			    in rss::Scopes to_scope);

	// sets the debugging mask to val
	void setDebug(in  long val);
	
	// adds a flag to the debugging mask
	void addDebug(in  long bits);

	// remove a flag from the debugging mask
	void removeDebug(in long bits);

	// returns the debugging mask
	long getDebug();

	// constants for setting Debugging levels
	const  long DEBUG_NONE        = 0x00000000;
	const  long DEBUG_CONTRACT    = 0x00000001;
	const  long DEBUG_REGION      = 0x00000002;
	const  long DEBUG_EVAL        = 0x00000004;
	const  long DEBUG_SYSCOND     = 0x00000008;
	const  long DEBUG_FUNC        = 0x00000010;
	const  long DEBUG_MAIN        = 0x00000020;
	const  long DEBUG_SCAFFOLD    = 0x00000040;
	const  long DEBUG_QKIMPL      = 0x00000080;
	const  long DEBUG_CALLBACK    = 0x00000100;
	const  long DEBUG_DUMP        = 0x00000200;
	const  long DEBUG_CONNECTOR   = 0x00000400;
	const  long DEBUG_RSS         = 0x00000800;
	const  long DEBUG_SHOW_CALLER = 0x40000000;
	const  long DEBUG_ALL         = 0x7FFFFFFF;

    };

};

#endif /* QUO_IDL */
