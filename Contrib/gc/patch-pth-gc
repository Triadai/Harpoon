Only in pth-1.3.3-mod: .done-all
Only in pth-1.3.3-mod: .done-install
Only in pth-1.3.3-mod: .done-test
Only in pth-1.3.3-mod: .libs
Only in pth-1.3.3-mod: Makefile
Only in pth-1.3.3-mod: config.cache
Only in pth-1.3.3-mod: config.log
Only in pth-1.3.3-mod: config.status
diff -ruHp -x configure -x pth_acdef.h.in -x *.o -x *.lo pth-1.3.3/configure.in pth-1.3.3-mod/configure.in
--- pth-1.3.3/configure.in	Thu Feb 24 07:40:22 2000
+++ pth-1.3.3-mod/configure.in	Wed Apr  5 23:27:14 2000
@@ -500,6 +500,21 @@ AC_MSG_PART(Build Parameters)
 dnl #  check for various build parameters
 AC_CHECK_BUILDPARAM
 
+dnl #  do we build with PTH_ATTR_STACK_POINTER support?
+AC_MSG_CHECKING([whether to include garbage collection support])
+AC_ARG_ENABLE(gc-support,dnl
+[  --enable-gc-support     enable support for garbage collection ]dnl
+(default=yes), enable_gc_support="$enableval", enable_gc_support=yes)
+dnl ensure that the compiler can handle the gcc extensions we use
+if test .$enable_gc_support = .yes; then
+	AC_TRY_COMPILE(,[int i=({int x=1; x;})],,enable_gc_support=no)
+fi
+AC_MSG_RESULT($enable_gc_support)
+if test .$enable_gc_support = .yes; then
+	AC_DEFINE(PTH_SAVE_STACK_POINTER, 1, 
+	          [Define to include garbage collection support])
+fi
+
 dnl #  whether to build Pthread library
 AC_MSG_CHECKING(whether to build Pthread library)
 AC_ARG_ENABLE(pthread,dnl
Only in pth-1.3.3-mod: configure.in~
Only in pth-1.3.3-mod: libpth.la
Only in pth-1.3.3-mod: libpthread.la
Only in pth-1.3.3-mod: libtool
Only in pth-1.3.3-mod: pth-config
Only in pth-1.3.3-mod: pth.h
diff -ruHp -x configure -x pth_acdef.h.in -x *.o -x *.lo pth-1.3.3/pth.h.in pth-1.3.3-mod/pth.h.in
--- pth-1.3.3/pth.h.in	Fri Mar 10 04:27:38 2000
+++ pth-1.3.3-mod/pth.h.in	Wed Apr  5 23:33:21 2000
@@ -148,6 +148,7 @@ enum {
     PTH_ATTR_CANCEL_STATE,   /* RW [unsigned int]      thread cancellation state         */
     PTH_ATTR_STACK_SIZE,     /* RW [unsigned int]      stack size                        */
     PTH_ATTR_STACK_ADDR,     /* RW [char *]            stack lower address               */
+    PTH_ATTR_STACK_POINTER,  /* RO [char *]            top of stack at last cntxt switch */
     PTH_ATTR_TIME_SPAWN,     /* RO [pth_time_t]        time thread was spawned           */
     PTH_ATTR_TIME_LAST,      /* RO [pth_time_t]        time thread was last dispatched   */
     PTH_ATTR_TIME_RAN,       /* RO [pth_time_t]        time thread was running           */
Only in pth-1.3.3-mod: pth.h.in~
Only in pth-1.3.3-mod: pth.h~
Only in pth-1.3.3-mod: pth_acdef.h
Only in pth-1.3.3-mod: pth_acdef.h.in~
Only in pth-1.3.3-mod: pth_acmac.h
diff -ruHp -x configure -x pth_acdef.h.in -x *.o -x *.lo pth-1.3.3/pth_attr.c pth-1.3.3-mod/pth_attr.c
--- pth-1.3.3/pth_attr.c	Thu Mar  9 07:01:05 2000
+++ pth-1.3.3-mod/pth_attr.c	Wed Apr  5 23:37:45 2000
@@ -209,6 +209,19 @@ intern int pth_attr_ctrl(int cmd, pth_at
             *dst = *src;
             break;
         }
+        case PTH_ATTR_STACK_POINTER: {
+	    /* current top-of-stack address */
+	    char **dst;
+	    if (cmd == PTH_ATTR_SET)
+		return_errno(FALSE, EPERM);
+            dst = va_arg(ap, char **);
+#if PTH_SAVE_STACK_POINTER
+	    *dst = (a->a_tid==NULL) ? NULL : a->a_tid->mctx.stack_ptr;
+#else
+	    return_errno(FALSE, EPERM);
+#endif
+	    break;
+	}
         case PTH_ATTR_TIME_SPAWN: {
             pth_time_t *dst;
             if (cmd == PTH_ATTR_SET)
Only in pth-1.3.3-mod: pth_attr.c~
diff -ruHp -x configure -x pth_acdef.h.in -x *.o -x *.lo pth-1.3.3/pth_mctx.c pth-1.3.3-mod/pth_mctx.c
--- pth-1.3.3/pth_mctx.c	Thu Mar  9 06:55:59 2000
+++ pth-1.3.3-mod/pth_mctx.c	Wed Apr  5 23:46:24 2000
@@ -56,6 +56,9 @@ struct pth_mctx_st {
 #if PTH_MCTX_DSP(sjlje)
     sigset_t block;
 #endif
+#if PTH_SAVE_STACK_POINTER
+    char *stack_ptr;
+#endif
     int error;
 };
 
@@ -63,21 +66,29 @@ struct pth_mctx_st {
 ** ____ MACHINE STATE SWITCHING ______________________________________
 */
 
+/* save the current stack pointer. (GNU C-specific hack) */
+#if PTH_SAVE_STACK_POINTER
+#define SAVE_STACK_POINTER(mctx)\
+           (mctx)->stack_ptr= (char*) ({ int _tos_=0; &_tos_; })
+#else
+#define SAVE_STACK_POINTER(mctx) 0
+#endif
+
 /*
  * save the current machine context
  */
 #if PTH_MCTX_MTH(mcsc)
 #define pth_mctx_save(mctx) \
-        ( (mctx)->error = errno, \
+        ( (mctx)->error = errno, SAVE_STACK_POINTER(mctx), \
           getcontext(&(mctx)->uc) )
 #elif PTH_MCTX_MTH(sjlj) && PTH_MCTX_DSP(sjlje)
 #define pth_mctx_save(mctx) \
-        ( (mctx)->error = errno, \
+        ( (mctx)->error = errno, SAVE_STACK_POINTER(mctx), \
           pth_sc(sigprocmask)(SIG_SETMASK, &((mctx)->block), NULL), \
           pth_sigsetjmp((mctx)->jb) )
 #elif PTH_MCTX_MTH(sjlj)
 #define pth_mctx_save(mctx) \
-        ( (mctx)->error = errno, \
+        ( (mctx)->error = errno, SAVE_STACK_POINTER(mctx), \
           pth_sigsetjmp((mctx)->jb) )
 #else
 #error "unknown mctx method"
Only in pth-1.3.3-mod: pth_mctx.c~
Only in pth-1.3.3-mod: pth_p.h
Only in pth-1.3.3-mod: pthread-config
Only in pth-1.3.3-mod: pthread.h
Only in pth-1.3.3-mod: test_httpd
Only in pth-1.3.3-mod: test_misc
Only in pth-1.3.3-mod: test_mp
Only in pth-1.3.3-mod: test_philo
Only in pth-1.3.3-mod: test_pthread
Only in pth-1.3.3-mod: test_select
Only in pth-1.3.3-mod: test_sfio
Only in pth-1.3.3-mod: test_sig
Only in pth-1.3.3-mod: test_std
