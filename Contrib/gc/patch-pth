? gnupth_threads.c
? test.c-SIMPLE
? .nfs610499130000000a
? test.c-REAL
? setjmp_test
? blah
? patch-pth
Index: Makefile
===================================================================
RCS file: /home/cananian/Harpoon/CVSROOT/Runtime/Contrib/gc/Attic/Makefile,v
retrieving revision 1.3
diff -u -r1.3 Makefile
--- Makefile	2000/04/01 02:10:10	1.3
+++ Makefile	2000/11/28 20:33:10
@@ -17,7 +17,7 @@
 #  if you use something other than the default ABI on your machine.
 
 CFLAGS= -O -DATOMIC_UNCOLLECTABLE -DNO_SIGNALS -DNO_EXECUTE_PERMISSION -DALL_INTERIOR_POINTERS -DSILENT \
-    -g -DLINUX_THREADS -D_REENTRANT
+    -g -DGNUPTH_THREADS # -D_REENTRANT
 
 # For dynamic library builds, it may be necessary to add flags to generate
 # PIC code, e.g. -fPIC on Linux.
@@ -40,6 +40,8 @@
 #  Also requires -D_REENTRANT. See README.hp.
 # -DLINUX_THREADS enables support for Xavier Leroy's Linux threads.
 #   see README.linux.  -D_REENTRANT may also be required.
+# -DGNUPTH_THREADS enables support for the GNU pth Portable Threading
+#   Library.  See http://www.gnu.org/software/pth.
 # -DALL_INTERIOR_POINTERS allows all pointers to the interior
 #   of objects to be recognized.  (See gc_priv.h for consequences.)
 # -DSMALL_CONFIG tries to tune the collector for small heap sizes,
@@ -152,9 +154,9 @@
 srcdir = .
 VPATH = $(srcdir)
 
-OBJS= alloc.o reclaim.o allchblk.o misc.o mach_dep.o os_dep.o mark_rts.o headers.o mark.o obj_map.o blacklst.o finalize.o new_hblk.o dbg_mlc.o malloc.o stubborn.o checksums.o solaris_threads.o hpux_irix_threads.o linux_threads.o typd_mlc.o ptr_chck.o mallocx.o solaris_pthreads.o
+OBJS= alloc.o reclaim.o allchblk.o misc.o mach_dep.o os_dep.o mark_rts.o headers.o mark.o obj_map.o blacklst.o finalize.o new_hblk.o dbg_mlc.o malloc.o stubborn.o checksums.o solaris_threads.o hpux_irix_threads.o linux_threads.o typd_mlc.o ptr_chck.o mallocx.o solaris_pthreads.o gnupth_threads.o
 
-CSRCS= reclaim.c allchblk.c misc.c alloc.c mach_dep.c os_dep.c mark_rts.c headers.c mark.c obj_map.c pcr_interface.c blacklst.c finalize.c new_hblk.c real_malloc.c dyn_load.c dbg_mlc.c malloc.c stubborn.c checksums.c solaris_threads.c hpux_irix_threads.c linux_threads.c typd_mlc.c ptr_chck.c mallocx.c solaris_pthreads.c
+CSRCS= reclaim.c allchblk.c misc.c alloc.c mach_dep.c os_dep.c mark_rts.c headers.c mark.c obj_map.c pcr_interface.c blacklst.c finalize.c new_hblk.c real_malloc.c dyn_load.c dbg_mlc.c malloc.c stubborn.c checksums.c solaris_threads.c hpux_irix_threads.c linux_threads.c typd_mlc.c ptr_chck.c mallocx.c solaris_pthreads.c gnupth_threads.c
 
 CORD_SRCS=  cord/cordbscs.c cord/cordxtra.c cord/cordprnt.c cord/de.c cord/cordtest.c cord/cord.h cord/ec.h cord/private/cord_pos.h cord/de_win.c cord/de_win.h cord/de_cmds.h cord/de_win.ICO cord/de_win.RC cord/SCOPTIONS.amiga cord/SMakefile.amiga
 
Index: gc.h
===================================================================
RCS file: /home/cananian/Harpoon/CVSROOT/Runtime/Contrib/gc/Attic/gc.h,v
retrieving revision 1.1.1.2
diff -u -r1.1.1.2 gc.h
--- gc.h	2000/01/25 04:59:16	1.1.1.2
+++ gc.h	2000/11/28 20:33:10
@@ -717,9 +717,24 @@
 
 #endif /* IRIX_THREADS || LINUX_THREADS */
 
+#if defined(GNUPTH_THREADS)
+/* These are similar. */
+# include <pth.h>
+# include <signal.h>
+
+  pth_t GC_pth_spawn(pth_attr_t attr, void *(*entry)(void *), void *arg);
+  int GC_pth_sigmask(int how, const sigset_t *set, sigset_t *oset);
+  int GC_pth_join(pth_t tid, void**value);
+
+# define pth_spawn GC_pth_spawn
+# define pth_join GC_pth_join
+
+#endif /* GNUPTH_THREADS */
+
 # if defined(PCR) || defined(SOLARIS_THREADS) || defined(WIN32_THREADS) || \
 	defined(IRIX_THREADS) || defined(LINUX_THREADS) || \
-	defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS)
+	defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS) || \
+	defined(GNUPTH_THREADS)
    	/* Any flavor of threads except SRC_M3.	*/
 /* This returns a list of objects, linked through their first		*/
 /* word.  Its use can greatly reduce lock contention problems, since	*/
@@ -728,7 +743,7 @@
 GC_PTR GC_malloc_many(size_t lb);
 #define GC_NEXT(p) (*(GC_PTR *)(p)) 	/* Retrieve the next element	*/
 					/* in returned list.		*/
-extern void GC_thr_init();	/* Needed for Solaris/X86	*/
+extern void GC_thr_init();	/* Needed for Solaris/X86 & GNU pth	*/
 
 #endif /* THREADS && !SRC_M3 */
 
Index: gc_priv.h
===================================================================
RCS file: /home/cananian/Harpoon/CVSROOT/Runtime/Contrib/gc/Attic/gc_priv.h,v
retrieving revision 1.4
diff -u -r1.4 gc_priv.h
--- gc_priv.h	2000/04/01 03:42:38	1.4
+++ gc_priv.h	2000/11/28 20:33:10
@@ -52,6 +52,9 @@
 #   include "gc_hdrs.h"
 # endif
 
+#undef TRUE
+#undef FALSE
+
 typedef int GC_bool;
 # define TRUE 1
 # define FALSE 0
@@ -430,6 +433,12 @@
 #    define LOCK() RT0u__inCritical++
 #    define UNLOCK() RT0u__inCritical--
 #  endif
+#  ifdef GNUPTH_THREADS
+#    include <pth.h>
+     extern pth_mutex_t GC_allocate_ml;
+#    define LOCK() pth_mutex_acquire(&GC_allocate_ml, FALSE, NULL);
+#    define UNLOCK() pth_mutex_release(&GC_allocate_ml);
+#  endif
 #  ifdef SOLARIS_THREADS
 #    include <thread.h>
 #    include <signal.h>
@@ -684,7 +693,8 @@
 # else
 #   if defined(SOLARIS_THREADS) || defined(WIN32_THREADS) \
 	|| defined(IRIX_THREADS) || defined(LINUX_THREADS) \
-	|| defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS)
+	|| defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS) \
+	|| defined(GNUPTH_THREADS)
       void GC_stop_world();
       void GC_start_world();
 #     define STOP_WORLD() GC_stop_world()
Index: gcconfig.h
===================================================================
RCS file: /home/cananian/Harpoon/CVSROOT/Runtime/Contrib/gc/Attic/gcconfig.h,v
retrieving revision 1.5
diff -u -r1.5 gcconfig.h
--- gcconfig.h	2000/03/25 08:10:24	1.5
+++ gcconfig.h	2000/11/28 20:33:10
@@ -1202,7 +1202,14 @@
 # if defined(HPUX_THREADS) && !defined(HPUX)
 --> inconsistent configuration
 # endif
-# if defined(PCR) || defined(SRC_M3) || \
+# if defined (GNUPTH_THREADS) && \
+       (defined(SOLARIS_THREADS) || defined(WIN32_THREADS) || \
+	defined(IRIX_THREADS) || defined(LINUX_THREADS) || \
+	defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS) )
+--> inconsistent configuration
+# endif
+
+# if defined(PCR) || defined(SRC_M3) || defined(GNUPTH_THREADS) || \
 	defined(SOLARIS_THREADS) || defined(WIN32_THREADS) || \
 	defined(IRIX_THREADS) || defined(LINUX_THREADS) || \
 	defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS)
Index: misc.c
===================================================================
RCS file: /home/cananian/Harpoon/CVSROOT/Runtime/Contrib/gc/Attic/misc.c,v
retrieving revision 1.1.1.2
diff -u -r1.1.1.2 misc.c
--- misc.c	2000/01/25 04:59:14	1.1.1.2
+++ misc.c	2000/11/28 20:33:10
@@ -49,7 +49,11 @@
 #	        if defined(HPUX_THREADS)
 		  pthread_mutex_t GC_allocate_ml = PTHREAD_MUTEX_INITIALIZER;
 #		else 
+#		 if defined(GNUPTH_THREADS)
+		   pth_mutex_t GC_allocate_ml = PTH_MUTEX_INIT;
+#		 else
 	          --> declare allocator lock here
+#		 endif
 #		endif
 #	      endif
 #	   endif
@@ -449,12 +453,13 @@
         GC_dirty_init();
 #   endif
 #   if defined(IRIX_THREADS) || defined(LINUX_THREADS) \
-       || defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS)
+       || defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS) \
+       || defined(GNUPTH_THREADS)
         GC_thr_init();
 #   endif
 #   if !defined(THREADS) || defined(SOLARIS_THREADS) || defined(WIN32_THREADS) \
        || defined(IRIX_THREADS) || defined(LINUX_THREADS) \
-       || defined(HPUX_THREADS)
+       || defined(HPUX_THREADS) || defined(GNUPTH_THREADS)
       if (GC_stackbottom == 0) {
 	GC_stackbottom = GC_get_stack_base();
       }
Index: os_dep.c
===================================================================
RCS file: /home/cananian/Harpoon/CVSROOT/Runtime/Contrib/gc/Attic/os_dep.c,v
retrieving revision 1.1.1.2
diff -u -r1.1.1.2 os_dep.c
--- os_dep.c	2000/01/25 04:59:15	1.1.1.2
+++ os_dep.c	2000/11/28 20:33:10
@@ -1486,7 +1486,8 @@
 
 # if defined(SOLARIS_THREADS) || defined(WIN32_THREADS) \
      || defined(IRIX_THREADS) || defined(LINUX_THREADS) \
-     || defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS)
+     || defined(IRIX_JDK_THREADS) || defined(HPUX_THREADS) \
+     || defined(GNUPTH_THREADS)
 
 extern void GC_push_all_stacks();
 
Index: test.c
===================================================================
RCS file: /home/cananian/Harpoon/CVSROOT/Runtime/Contrib/gc/Attic/test.c,v
retrieving revision 1.1.1.2
diff -u -r1.1.1.2 test.c
--- test.c	2000/01/25 04:59:16	1.1.1.2
+++ test.c	2000/11/28 20:33:10
@@ -49,6 +49,10 @@
 #   include <pthread.h>
 # endif
 
+# if defined(GNUPTH_THREADS)
+#   include <pth.h>
+# endif
+
 # ifdef WIN32_THREADS
 #   include <process.h>
     static CRITICAL_SECTION incr_cs;
@@ -171,6 +175,10 @@
 sexpr reverse(x)
 sexpr x;
 {
+#if defined(GNUPTH_THREADS)
+    /* get some concurrency going despite non-preemptive threading */
+    pth_yield(NULL);
+#endif
     return( reverse1(x, nil) );
 }
 
@@ -295,6 +303,21 @@
       }
     }
 
+# elif defined(GNUPTH_THREADS)
+# include <errno.h>
+    void fork_a_thread()
+    {
+      pth_t t;
+      if ((t = pth_spawn(PTH_ATTR_DEFAULT, tiny_reverse_test, 0)) == NULL) {
+    	(void)GC_printf1("Small thread creation failed: %ld\n", (long)errno);
+    	FAIL;
+      }
+      if (!pth_join(t, NULL)) {
+        (void)GC_printf1("Small thread join failed %ld\n", (long)errno);
+        FAIL;
+      }
+    }
+
 # elif defined(WIN32_THREADS)
     void fork_a_thread()
     {
@@ -581,6 +604,10 @@
          	FAIL;
         }
     }
+#if defined(GNUPTH_THREADS)
+    /* allow concurrency despite non-preemptive scheduling */
+    pth_yield(NULL);
+#endif
     return(result);
 }
 
@@ -602,6 +629,10 @@
     chktree(t -> lchild, n-1);
     if (counter++ % 73 == 0) (void) GC_MALLOC(counter%373);
     chktree(t -> rchild, n-1);
+#if defined(GNUPTH_THREADS)
+    /* allow concurrency despite non-preemptive scheduling */
+    pth_yield(NULL);
+#endif
 }
 
 # if defined(SOLARIS_THREADS) && !defined(_SOLARIS_PTHREADS)
@@ -676,7 +707,40 @@
 # endif
 }
 
+# elif defined(GNUPTH_THREADS)
+pth_key_t fl_key;
+
+void * alloc8bytes()
+{
+# ifdef SMALL_CONFIG
+    return(GC_malloc(8));
 # else
+    void ** my_free_list_ptr;
+    void * my_free_list;
+    
+    my_free_list_ptr = (void **)pth_key_getdata(fl_key);
+    if (my_free_list_ptr == 0) {
+        my_free_list_ptr = GC_NEW_UNCOLLECTABLE(void *);
+        if (!pth_key_setdata(fl_key, my_free_list_ptr)) {
+    	    (void)GC_printf0("pth_key_setdata failed\n");
+    	    FAIL;
+        }
+    }
+    my_free_list = *my_free_list_ptr;
+    if (my_free_list == 0) {
+        my_free_list = GC_malloc_many(8);
+        if (my_free_list == 0) {
+            (void)GC_printf0("alloc8bytes out of memory\n");
+    	    FAIL;
+        }
+    }
+    *my_free_list_ptr = GC_NEXT(my_free_list);
+    GC_NEXT(my_free_list) = 0;
+    return(my_free_list);
+# endif
+}
+
+# else
 #   define alloc8bytes() GC_MALLOC_ATOMIC(8)
 # endif
 #endif
@@ -786,6 +850,10 @@
         new[0] = 17;
         new[1] = (GC_word)old;
         old = new;
+#if defined(GNUPTH_THREADS)
+	/* allow concurrency despite non-preemptive scheduling */
+	pth_yield(NULL);
+#endif
     }
     for (i = 0; i < 20000; i++) {
         if (new[0] != 17) {
@@ -796,6 +864,10 @@
         new[0] = 0;
         old = new;
         new = (GC_word *)(old[1]);
+#if defined(GNUPTH_THREADS)
+	/* allow concurrency despite non-preemptive scheduling */
+	pth_yield(NULL);
+#endif
     }
     GC_gcollect();
     GC_noop(x);
@@ -1031,7 +1103,7 @@
 
 #if !defined(PCR) && !defined(SOLARIS_THREADS) && !defined(WIN32_THREADS) \
   && !defined(IRIX_THREADS) && !defined(LINUX_THREADS) \
-  && !defined(HPUX_THREADS) || defined(LINT)
+  && !defined(HPUX_THREADS) && !defined(GNUPTH_THREADS) || defined(LINT)
 #ifdef MSWIN32
   int APIENTRY WinMain(HINSTANCE instance, HINSTANCE prev, LPSTR cmd, int n)
 #else
@@ -1163,7 +1235,8 @@
 #endif
 
 #if defined(SOLARIS_THREADS) || defined(IRIX_THREADS) \
- || defined(HPUX_THREADS) || defined(LINUX_THREADS)
+ || defined(HPUX_THREADS) || defined(LINUX_THREADS) \
+ || defined(GNUPTH_THREADS)
 void * thr_run_one_test(void * arg)
 {
     run_one_test();
@@ -1210,6 +1283,53 @@
     (void)fflush(stdout);
     return(0);
 }
+#elif defined(GNUPTH_THREADS)
+main()
+{
+    pth_t th1;
+    pth_t th2;
+    pth_attr_t attr;
+    int code;
+
+    pth_init();
+    GC_INIT();	/* Be sure to init pth.	*/
+
+    attr = pth_attr_new();
+    /*pth_attr_set(attr, PTH_ATTR_STACK_SIZE, 1000000);*/
+    n_tests = 0;
+#   ifdef MPROTECT_VDB
+    	GC_enable_incremental();
+        (void) GC_printf0("Switched to incremental mode\n");
+	(void) GC_printf0("Emulating dirty bits with mprotect/signals\n");
+#   endif
+    (void) GC_set_warn_proc(warn_proc);
+    if (!pth_key_create(&fl_key, 0)) {
+        (void)GC_printf1("Key creation failed %ld\n", (long)errno);
+    	FAIL;
+    }
+    if ((th1 = pth_spawn(attr, thr_run_one_test, 0)) == NULL) {
+    	(void)GC_printf1("Thread 1 creation failed %ld\n", (long)errno);
+    	FAIL;
+    }
+    if ((th2 = pth_spawn(attr, thr_run_one_test, 0)) == NULL) {
+    	(void)GC_printf1("Thread 2 creation failed %ld\n", (long)errno);
+    	FAIL;
+    }
+    run_one_test();
+    if (!pth_join(th1, 0)) {
+        (void)GC_printf1("Thread 1 failed %ld\n", (long)errno);
+        FAIL;
+    }
+    if (pth_join(th2, 0) != 0) {
+        (void)GC_printf1("Thread 2 failed %ld\n", (long)errno);
+        FAIL;
+    }
+    check_heap_stats();
+    (void)fflush(stdout);
+    pth_attr_destroy(attr);
+    GC_printf1("Completed %d collections\n", GC_gc_no);
+    return(0);
+}
 #else /* pthreads */
 main()
 {
@@ -1262,4 +1382,5 @@
     return(0);
 }
 #endif /* pthreads */
-#endif /* SOLARIS_THREADS || IRIX_THREADS || LINUX_THREADS || HPUX_THREADS */
+#endif /* SOLARIS_THREADS || IRIX_THREADS || LINUX_THREADS || HPUX_THREADS ||
+        * GNUPTH_THREADS */
Index: threadlibs.c
===================================================================
RCS file: /home/cananian/Harpoon/CVSROOT/Runtime/Contrib/gc/Attic/threadlibs.c,v
retrieving revision 1.1.1.2
diff -u -r1.1.1.2 threadlibs.c
--- threadlibs.c	2000/01/25 04:59:16	1.1.1.2
+++ threadlibs.c	2000/11/28 20:33:10
@@ -12,6 +12,9 @@
 #   ifdef SOLARIS_THREADS
         printf("-lthread -ldl\n");
 #   endif
+#   ifdef GNUPTH_THREADS
+	printf("-lpth\n");
+#   endif
     return 0;
 }
 
--- /dev/null	Tue May  5 16:32:27 1998
+++ gnupth_threads.c	Thu Apr  6 01:28:17 2000
@@ -0,0 +1,387 @@
+/*
+ * Copyright (c) 2000 by C. Scott Ananian.  All rights reserved.
+ *
+ * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED
+ * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.
+ *
+ * Permission is hereby granted to use or copy this program
+ * for any purpose,  provided the above notices are retained on all copies.
+ * Permission to modify the code and to distribute modified code is granted,
+ * provided the above notices are retained, and a notice that the code was
+ * modified is included with the above copyright notice.
+ */
+/*
+ * Support code for GNU pth, the Portable Threading Library.
+ *
+ * The basic scheme of this pth support file is very similar to that
+ * of linux_threads.c and irix_threads.c, but the pth API is not
+ * quite the same as the pthreads API, so there are syntactic differences.
+ * Nonetheless, if you discovered *functional* bugs in this file, you
+ * should probably check the other two files to see if the bug is living
+ * there as well.
+ * 
+ * We use only the published interface to pth, which means that the
+ * collector should work with pth on *any platform*.  Ive only tested
+ * this on Linux/StrongARM, however.
+ */
+
+#define DEBUG_THREADS 1
+
+/* ANSI C requires that a compilation unit contains something */
+# include "gc_priv.h"
+# include "gcconfig.h"
+
+# if defined(GNUPTH_THREADS)
+# include <pth.h>
+# include <assert.h>
+# include <time.h>
+# include <errno.h>
+# include <unistd.h>
+# include <sys/mman.h>
+# include <sys/time.h>
+
+#undef pth_spawn
+#undef pth_sigmask
+#undef pth_join
+
+#define pth_equal(a, b) ((a)==(b))
+
+void GC_thr_init();
+
+/* We use the allocation lock to protect thread-related data structures. */
+
+/* The set of all known threads.  We intercept thread creation and 	*/
+/* joins.  We never actually create detached threads.  We allocate all 	*/
+/* new thread stacks ourselves.  These allow us to maintain this	*/
+/* data structure.							*/
+/* Protected by GC_thr_lock.						*/
+/* Some of this should be declared volatile, but that's incosnsistent	*/
+/* with some library routine declarations.  		 		*/
+typedef struct GC_Thread_Rep {
+    struct GC_Thread_Rep * next;  /* More recently allocated threads	*/
+				  /* with a given pth id come 		*/
+				  /* first.  (All but the first are	*/
+				  /* guaranteed to be dead, but we may  */
+				  /* not yet have registered the join.) */
+    pth_t id;
+    word flags;
+#	define FINISHED 1   	/* Thread has exited.	*/
+#	define DETACHED 2	/* Thread is intended to be detached.	*/
+#	define MAIN_THREAD 4	/* True for the original thread only.	*/
+
+    ptr_t stack_end;
+    ptr_t stack_ptr;  		/* Valid only when stopped. */
+    int	signal;
+    void * status;		/* The value returned from the thread.  */
+    				/* Used only to avoid premature 	*/
+				/* reclamation of any data it might 	*/
+				/* reference.				*/
+} * GC_thread;
+
+GC_thread GC_lookup_thread(pth_t id);
+
+GC_bool GC_thr_initialized = FALSE;
+
+# define THREAD_TABLE_SZ 128	/* Must be power of 2	*/
+volatile GC_thread GC_threads[THREAD_TABLE_SZ];
+
+/* Add a thread to GC_threads.  We assume it wasn't already there.	*/
+/* Caller holds allocation lock.					*/
+GC_thread GC_new_thread(pth_t id)
+{
+    int hv = ((word)id) % THREAD_TABLE_SZ;
+    GC_thread result;
+    static struct GC_Thread_Rep first_thread;
+    static GC_bool first_thread_used = FALSE;
+    
+    GC_printf2("REGISTERING %p / hv %x\n", id, hv);
+    if (!first_thread_used) {
+    	result = &first_thread;
+    	first_thread_used = TRUE;
+    	/* Dont acquire allocation lock, since we may already hold it. */
+    } else {
+        result = (struct GC_Thread_Rep *)
+        	 GC_generic_malloc_inner(sizeof(struct GC_Thread_Rep), NORMAL);
+    }
+    if (result == 0) return(0);
+    result -> id = id;
+    result -> next = GC_threads[hv];
+    GC_threads[hv] = result;
+    /* result -> flags = 0; */
+    return(result);
+}
+
+/* Delete a thread from GC_threads.  We assume it is there.	*/
+/* (The code intentionally traps if it wasn't.)			*/
+/* Caller holds allocation lock.				*/
+void GC_delete_thread(pth_t id)
+{
+    int hv = ((word)id) % THREAD_TABLE_SZ;
+    register GC_thread p = GC_threads[hv];
+    register GC_thread prev = 0;
+    
+    while (!pth_equal(p -> id, id)) {
+        prev = p;
+        p = p -> next;
+    }
+    if (prev == 0) {
+        GC_threads[hv] = p -> next;
+    } else {
+        prev -> next = p -> next;
+    }
+}
+
+/* If a thread has been joined, but we have not yet		*/
+/* been notified, then there may be more than one thread 	*/
+/* in the table with the same pth id.				*/
+/* This is OK, but we need a way to delete a specific one.	*/
+void GC_delete_gc_thread(pth_t id, GC_thread gc_id)
+{
+    int hv = ((word)id) % THREAD_TABLE_SZ;
+    register GC_thread p = GC_threads[hv];
+    register GC_thread prev = 0;
+
+    while (p != gc_id) {
+        prev = p;
+        p = p -> next;
+    }
+    if (prev == 0) {
+        GC_threads[hv] = p -> next;
+    } else {
+        prev -> next = p -> next;
+    }
+}
+
+/* Return a GC_thread corresponding to a given thread_t.	*/
+/* Returns 0 if it's not there.					*/
+/* Caller holds  allocation lock or otherwise inhibits 		*/
+/* updates.							*/
+/* If there is more than one thread with the given id we 	*/
+/* return the most recent one.					*/
+GC_thread GC_lookup_thread(pth_t id)
+{
+    int hv = ((word)id) % THREAD_TABLE_SZ;
+    register GC_thread p = GC_threads[hv];
+    
+    while (p != 0 && !pth_equal(p -> id, id)) p = p -> next;
+    return(p);
+}
+
+/* Caller holds allocation lock.	*/
+void GC_stop_world()
+{
+  /* world is already stopped -- pth only runs one thread at a time. */
+  /* we *could* send pth_suspend(), I suppose. */
+}
+
+/* Caller holds allocation lock.	*/
+void GC_start_world()
+{
+  /* nothing special required -- as soon as we call pth_yield(), the other
+   * threads will start executing again.  We *could* send pth_resume(),
+   * I suppose. */
+}
+
+/* We hold allocation lock.  We assume the world is stopped.	*/
+void GC_push_all_stacks()
+{
+    register int i;
+    register GC_thread p;
+    register ptr_t sp = GC_approx_sp();
+    ptr_t lo, hi; char * tos, * bos;
+    unsigned int size = 0;
+    pth_t me = pth_self();
+    pth_attr_t attr;
+    
+    if (!GC_thr_initialized) GC_thr_init();
+    #if DEBUG_THREADS
+        GC_printf1("Pushing stacks from thread 0x%lx\n", (unsigned long) me);
+    #endif
+    for (i = 0; i < THREAD_TABLE_SZ; i++) {
+      for (p = GC_threads[i]; p != 0; p = p -> next) {
+        if (p -> flags & FINISHED) continue;
+	attr = pth_attr_of(p -> id);
+	pth_attr_get(attr, PTH_ATTR_STACK_ADDR, &bos);
+#ifdef STACK_GROWS_DOWN
+	pth_attr_get(attr, PTH_ATTR_STACK_SIZE, &size);
+#endif
+	bos += size;
+	pth_attr_get(attr, PTH_ATTR_STACK_POINTER, &tos);
+	pth_attr_destroy(attr);
+
+        if (pth_equal(p -> id, me)) {
+	    tos = GC_approx_sp();
+	}
+	/* the original stack was/is GC_stackbottom */
+	if (bos==0) bos = GC_stackbottom; // NOT SURE THIS IS RIGHT.
+#ifdef STACK_GROWS_DOWN
+	hi = bos; lo = tos;
+#else
+	hi = tos; lo = bos;
+#endif
+        #if DEBUG_THREADS
+            GC_printf3("Stack for thread 0x%lx = [%p,%p)\n",
+    	        (unsigned long) p -> id, lo, hi);
+        #endif
+	GC_push_all_stack(lo, hi);
+      }
+    }
+}
+
+
+/* We hold the allocation lock.	*/
+void GC_thr_init()
+{
+    GC_thread t;
+    struct sigaction act;
+
+    if (GC_thr_initialized) return;
+    GC_thr_initialized = TRUE;
+
+    /* make sure pth is ready to go. */
+    GC_printf1("ORIGINAL SP %p\n", GC_approx_sp());
+    pth_init();
+    GC_printf1("NEW SP %p\n", GC_approx_sp());
+
+    /* Add the initial thread, so we can stop it.	*/
+      t = GC_new_thread(pth_self());
+      t -> stack_ptr = 0;
+      t -> flags = DETACHED | MAIN_THREAD;
+}
+
+struct start_info {
+    void *(*start_routine)(void *);
+    void *arg;
+    word flags;
+    pth_barrier_t registered;	 /* blocked ==> in our thread table, but */
+				 /* parent hasn't yet noticed.		*/
+};
+
+
+void GC_thread_exit_proc(void *arg)
+{
+    GC_thread me;
+    struct start_info * si = arg;
+
+    GC_printf1("IN EXIT PROC %p\n", pth_self());
+    LOCK();
+    me = GC_lookup_thread(pth_self());
+    if (me -> flags & DETACHED) {
+    	GC_delete_thread(pth_self());
+    } else {
+	me -> flags |= FINISHED;
+    }
+    UNLOCK();
+}
+
+int GC_pth_join(pth_t thread, void **retval)
+{
+    int result;
+    GC_thread thread_gc_id;
+    
+    LOCK();
+    thread_gc_id = GC_lookup_thread(thread);
+    /* This is guaranteed to be the intended one, since the thread id	*/
+    /* cant have been recycled by pth.					*/
+    UNLOCK();
+    result = pth_join(thread, retval);
+    LOCK();
+    /* Here the pth thread id may have been recycled. */
+    GC_delete_gc_thread(thread, thread_gc_id);
+    UNLOCK();
+    return result;
+}
+
+void * GC_start_routine(void * arg)
+{
+    struct start_info * si = arg;
+    void * result;
+    GC_thread me;
+    pth_t my_pthread;
+    pth_attr_t my_attr;
+    void *(*start)(void *);
+    void *start_arg;
+    unsigned int size=0;
+
+    my_pthread = pth_self();
+    LOCK();
+    me = GC_new_thread(my_pthread);
+    me -> flags = si -> flags;
+    me -> stack_ptr = 0;
+    my_attr = pth_attr_of(pth_self());
+    pth_attr_get(my_attr, PTH_ATTR_STACK_ADDR, &(me -> stack_end));
+#ifdef STACK_GROWS_DOWN
+    pth_attr_get(my_attr, PTH_ATTR_STACK_SIZE, &size);
+#endif
+    me->stack_end += size;
+    pth_attr_destroy(my_attr);
+    UNLOCK();
+    start = si -> start_routine;
+    start_arg = si -> arg;
+    /* unblock the creating thread */
+    pth_barrier_reach(&(si -> registered));
+    /* okay, run start() */
+    pth_cleanup_push(GC_thread_exit_proc, si);
+#   ifdef DEBUG_THREADS
+        GC_printf1("Starting thread 0x%lx\n", pth_self());
+        GC_printf1("pid = %ld\n", (long) getpid());
+        GC_printf1("sp = 0x%lx\n", (long) &arg);
+        GC_printf1("eos = 0x%lx\n", (long) me->stack_end);
+	GC_printf1("start_routine = 0x%lx\n", start);
+#   endif
+    result = (*start)(start_arg);
+#if DEBUG_THREADS
+        GC_printf1("Finishing thread 0x%x\n", pth_self());
+#endif
+    me -> status = result;
+    me -> flags |= FINISHED;
+    pth_cleanup_pop(1);
+    /* Cleanup acquires lock, ensuring that we can't exit		*/
+    /* while a collection that thinks we're alive is trying to stop     */
+    /* us.								*/
+    return(result);
+}
+
+pth_t
+GC_pth_spawn(pth_attr_t attr,
+             void *(*start_routine)(void *), void *arg)
+{
+    GC_thread t;
+    pth_t my_new_thread;
+    void * stack;
+    size_t stacksize;
+    pth_attr_t new_attr;
+    int joinable;
+    word my_flags = 0;
+    struct start_info * si = GC_malloc(sizeof(struct start_info)); 
+	/* This is otherwise saved only in an area mmapped by the thread */
+	/* library, which isn't visible to the collector.		 */
+
+    if (0 == si) { errno=ENOMEM; return NULL; }
+    pth_barrier_init(&(si -> registered), 2);
+    si -> start_routine = start_routine;
+    si -> arg = arg;
+    LOCK();
+    if (!GC_thr_initialized) GC_thr_init();
+    if (NULL == attr) {
+        stack = 0;
+	new_attr = pth_attr_new();
+    } else {
+        new_attr = attr;
+    }
+    pth_attr_get(new_attr, PTH_ATTR_JOINABLE, &joinable);
+    if (!joinable) my_flags |= DETACHED;
+    si -> flags = my_flags;
+    UNLOCK();
+    my_new_thread = pth_spawn(new_attr, GC_start_routine, si);
+    /* Wait until child has been added to the thread table.		*/
+    /* This also ensures that we hold onto si until the child is done	*/
+    /* with it.  Thus it doesn't matter whether it is otherwise		*/
+    /* visible to the collector.					*/
+    if (!pth_barrier_reach(&(si -> registered)))
+      ABORT("pth_barrier_reach failed");
+    if (NULL == attr) pth_attr_destroy(new_attr);
+    return(my_new_thread);
+}
+
+# endif /* GNUPTH_THREADS */
