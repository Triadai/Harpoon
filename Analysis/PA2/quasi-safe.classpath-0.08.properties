# Copyright 2005 Alexandru Salcianu <salcianu@alum.mit.edu>
# Licensed under the terms of the GNU GPL; see COPYING for details.

# $Id: quasi-safe.classpath-0.08.properties,v 1.1 2005-09-14 23:13:33 salcianu Exp $

# Contains a partial list of the quasi-safe methods from the GNU
# classpath-0.08 implementation of the Java standard library.

# A "quasi-safe" method is a method that does not create any new
# externally visible aliasing to objects reachable from its parameters
# (this subsumes the fact that no parameter is lost, or returned).

# For each such method, we indicate its effects (if any): the indices
# of the parameters whose (transitively reachable) non-object fields
# may be mutated.  In addition, we use -1 for the IO read effect and
# -2 for the IO write effect.


# ---- java.io.FileDescriptor
# Opens a file
java.io.FileDescriptor.nativeOpen(Ljava/lang/String;I)J
# Closes a file
java.io.FileDescriptor.nativeClose(J)J
# Writes a single byte to a file
java.io.FileDescriptor.nativeWriteByte(JI)J = -2
# Writes a byte buffer to a file
java.io.FileDescriptor.nativeWriteBuf(J[BII)J = -2
# Reads a single byte from a file
java.io.FileDescriptor.nativeReadByte(J)I = -1
# Reads a buffer of bytes from a file
java.io.FileDescriptor.nativeReadBuf(J[BII)I = -1, 2  # IO read + writes the array
# Returns the number of bytes available for reading
java.io.FileDescriptor.nativeAvailable(J)I = -1
# Moves the current position to a certain place inside the file
java.io.FileDescriptor.nativeSeek(JJIZ)J = -1
# Returns current position inside a file
java.io.FileDescriptor.nativeGetFilePointer(J)J
# Gets file length
java.io.FileDescriptor.nativeGetLength(J)J = -1
# Sets the length of the file to the specified number of bytes
java.io.FileDescriptor.nativeSetLength(JJ)V = -2
# Tests file desc for validity
java.io.FileDescriptor.nativeValid(J)Z
# Flushes any buffered contents to disk
java.io.FileDescriptor.nativeSync(J)V = -2
      
# ---- java.io.File
# Checks whether a file is a plain file
java.io.File.isFileInternal(Ljava/lang/String;)Z = -1
# Checks whether a file is a directory
java.io.File.isDirectoryInternal(Ljava/lang/String;)Z = -1
# Checks whether a file is readable
java.io.File.canReadInternal(Ljava/lang/String;)Z = -1
# Checks whether a file is writable
java.io.File.canWriteInternal(Ljava/lang/String;)Z = -1
# Deletes a file
java.io.File.deleteInternal(Ljava/lang/String;)Z = -2
# Checks existence of a certain file
java.io.File.existsInternal(Ljava/lang/String;)Z = -1
# Gets the last file modification time
java.io.File.lastModifiedInternal(Ljava/lang/String;)J = -1
# Gets the length of a file
java.io.File.lengthInternal(Ljava/lang/String;)J = -1
# Gets the list of files in a directory
java.io.File.listInternal(Ljava/lang/String;)[Ljava/lang/String; = -1
# Creates a directory
java.io.File.mkdirInternal(Ljava/lang/String;)Z = -2
# Creates a file (possibly in the /tmp directory)
java.io.File.createInternal(Ljava/lang/String;)Z = -2
# Makes a file readable
java.io.File.setReadOnlyInternal(Ljava/lang/String;)Z = -2
# Makes a file readable
java.io.File.setReadOnlyInternal(Ljava/lang/String;)Z = -2
# Renames a file
java.io.File.renameToInternal(Ljava/lang/String;Ljava/lang/String;)Z = -2
# Sets the time of the last modification
java.io.File.setLastModifiedInternal(Ljava/lang/String;J)Z = -2


# ---- java.lang.VMDouble
java.lang.VMDouble.doubleToLongBits(D)J
java.lang.VMDouble.doubleToRawLongBits(D)J
java.lang.VMDouble.longBitsToDouble(J)D


# ---- java.lang.VMFloat
java.lang.VMFloat.floatToIntBits(F)I
java.lang.VMFloat.floatToRawIntBits(F)I
java.lang.VMFloat.intBitsToFloat(I)F


# ---- java.lang.Class
java.lang.Class.isArray()Z
java.lang.Class.isAssignableFrom(Ljava/lang/Class;)Z
java.lang.Class.isInstance(Ljava/lang/Object;)Z
java.lang.Class.isInterface()Z
java.lang.Class.isPrimitive()Z
java.lang.Class.getName()Ljava/lang/String;


# ---- java.lang.VMClass
java.lang.VMClass.isArray()I
java.lang.VMClass.isAssignableFrom(Ljava/lang/Class;)Z
java.lang.VMClass.isInstance(Ljava/lang/Object;)Z
java.lang.VMClass.isInterface()Z
java.lang.VMClass.isPrimitive()Z
java.lang.VMClass.getName()Ljava/lang/String;


# ---- java.lang.VMSystem
# VERY IMPORTANT because it is transitively invoked by java.lang.Object.hashCode
java.lang.VMSystem.identityHashCode(Ljava/lang/Object;)I
# Object.equals seems not to be a problem because it is implemented using "=="
java.lang.VMSystem.currentTimeMillis()J


# some basic reflection methods
java.lang.reflect.Field.getModifiers()I
java.lang.reflect.Field.getName()Ljava/lang/String;
java.lang.reflect.Method.getModifiers()I
java.lang.reflect.Method.getName()Ljava/lang/String;
java.lang.reflect.Constructor.getModifiers()I

