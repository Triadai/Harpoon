#!/bin/bash

HARPOON_DIR=$HOME/Harpoon
RUNTIME_DIR=${HARPOON_DIR}/Runtime
FLEX_DIR=${HARPOON_DIR}/Code
SPEC_DIR=$HOME/Spec/jvm98
JOLDEN_DIR=$HOME/jolden

NORMAL_RUNTIME_OPTS="--with-precise-c --with-gc=conservative --with-thread-model=heavy --disable-shared --with-all-static --with-exec-env-args"
PREALLOC_RUNTIME_OPTS="${NORMAL_RUNTIME_OPTS} --with-prealloc-opt"

# all SPECjvm98 applications
SPEC_APPS="_200_check _201_compress _202_jess _205_raytrace _209_db _222_mpegaudio _228_jack _213_javac"

#SPEC_APPS="_200_check _201_compress _205_raytrace _209_db _222_mpegaudio _228_jack"

#SPEC_APPS="_200_check"
#SPEC_APPS="_205_raytrace"
#SPEC_APPS="_228_jack"
#SPEC_APPS="_202_jess"
#SPEC_APPS="_213_javac"
#SPEC_APPS="_222_mpegaudio"
#SPEC_APPS="_202_jess"
#SPEC_APPS="_201_compress"
#SPEC_APPS="_999_checkit"
#SPEC_APPS="_209_db"
#SPEC_APPS=" _222_mpegaudio"


# all Java OLDEN applications
JOLDEN_APPS="BH BiSort Em3d Health MST Perimeter Power TreeAdd TSP Voronoi"

#JOLDEN_APPS="BH"

#JOLDEN_APPS="Perimeter"


function execute_build_command() {
    BUILD_CMD=$1
    cd ${FLEX_DIR}
    echo BUILD_CMD: $BUILD_CMD
    ${BUILD_CMD}
}


function save_result() {
    name=$1;
    prefix=$2;
    case $name in
	JCUP) mv parser.java ${resultDir}/parser.java.$prefix;;
	JLEX) mv Lexer.jlex.java ${resultDir}/Lexer.jlex.java.$prefix;;
    esac
}

# 1    2        3          4            5              6
# name flexPath mainClass  buildOptions testCaseParams specialCmd
function build_spec_app1() {
    name=$1
    flexPath=$2
    mainClass=$3
    buildOptions=$4
    testCaseParams=$5
    specialCmd=$6

    echo name           = \"$name\"
    echo flexPath       = \"$flexPath\"
    echo mainClass      = \"$mainClass\"
    echo buildOptions   = \"$buildOptions\"
    echo testCaseParams = \"$testCaseParams\"
    echo specialCmd     = \"$specialCmd\"

    resultDir=${FLEX_DIR}/results/spec/$name
    mkdir -p ${resultDir}

    export FLEXPATH=$flexPath

    cd ${FLEX_DIR}

    echo
    echo Building normal version for $name
    execute_build_command "bin/build-precisec --ia-only-sync-removal $buildOptions $mainClass $name.normal"
    #rm -rf ${FLEX_DIR}/as$name.normal

    echo
    echo Building instrumented version for $name
    execute_build_command "bin/build-precisec $buildOptions -W tmp/$name.an.txt $mainClass $name.instr"
    #rm -rf ${FLEX_DIR}/as$name.instr

    $specialCmd
    if [ "$testCaseParams" = "< Parser.cup" ] ; then
	${RUNTIME_DIR}/run$name.normal < Parser.cup > $resultDir/$name.normal.out 2> ${resultDir}/$name.normal.err
    else
	${RUNTIME_DIR}/run$name.normal $testCaseParams > $resultDir/$name.normal.out 2> ${resultDir}/$name.normal.err
    fi

    save_result $name normal;

    $specialCmd
    if [ "$testCaseParams" = "< Parser.cup" ] ; then
	${RUNTIME_DIR}/run$name.instr < Parser.cup > $resultDir/$name.instr.out 2> ${resultDir}/$name.instr.err
    else
	${RUNTIME_DIR}/run$name.instr $testCaseParams > $resultDir/$name.instr.out 2> ${resultDir}/$name.instr.err
    fi

    mv profile ${FLEX_DIR}/tmp/$name.profile
    save_result $name instr;
}

# 1    2        3          4            5              6
# name flexPath mainClass  buildOptions testCaseParams specialCmd
function build_spec_app2() {
    name=$1
    flexPath=$2
    mainClass=$3
    buildOptions=$4
    testCaseParams=$5
    specialCmd=$6

    echo name           = \"$name\"
    echo flexPath       = \"$flexPath\"
    echo mainClass      = \"$mainClass\"
    echo buildOptions   = \"$buildOptions\"
    echo testCaseParams = \"$testCaseParams\"
    echo specialCmd     = \"$specialCmd\"

    resultDir=${FLEX_DIR}/results/spec/$name
    mkdir -p ${resultDir}

    cd ${FLEX_DIR}

    export FLEXPATH=$flexPath

    echo
    echo Building version with preallocation for $name
    execute_build_command "bin/build-precisec -Dharpoon.runtime=2 $buildOptions -Z tmp/$name.an.txt,tmp/$name.profile --prealloc-opt $mainClass $name.prealloc" | tee $resultDir/$name.ia.stat
    #rm -rf ${FLEX_DIR}/as$name.prealloc

    $specialCmd
    if [ "$testCaseParams" = "< Parser.cup" ] ; then
	${RUNTIME_DIR}/run$name.prealloc < Parser.cup > $resultDir/$name.prealloc.out 2> ${resultDir}/$name.prealloc.err
    else
	${RUNTIME_DIR}/run$name.prealloc $testCaseParams > $resultDir/$name.prealloc.out 2> ${resultDir}/$name.prealloc.err
    fi

    save_result $name prealloc;
}


function use_runtime() {
    runtime=$1
    echo
    echo USING THE `echo $runtime | tr [:lower:] [:upper:]` RUNTIME
    echo

    cd ${HARPOON_DIR}
    rm ${RUNTIME_DIR}
    ln -sf ${RUNTIME_DIR}.$runtime ${RUNTIME_DIR}
}

function verify() {
    for option in ${RUNTIME_OPTS}; do
	head config.log | grep -e $option 2>&1 > /dev/null
	if [ "$?" != "0" ] ; then
	    echo BAD:  missing runtime option $option
	    return 1;
	fi;
    done
    return 0;
}

function build_runtime() {
    extension=$1;
    RUNTIME_OPTS=$2;

    # create the two directories (normal / prealloc), if necessary
    if [ ! -d ${RUNTIME_DIR}.${extension} ]; then
	if [ ! -d ${RUNTIME_DIR} ]; then
	    echo Could not find ${RUNTIME_DIR} ...
	    exit 1;
	fi;

	echo  Copy ${RUNTIME_DIR} to ${RUNTIME_DIR}.normal

	cp -r ${RUNTIME_DIR} ${RUNTIME_DIR}.normal;
	
	echo  Preparing to move!

	mv ${RUNTIME_DIR} ${RUNTIME_DIR}.prealloc;

	ls -ld ${RUNTIME_DIR}*
    fi;

    cd ${RUNTIME_DIR}.${extension}

    if verify "${RUNTIME_OPTS}"; then
	echo Runtime.${extension} already configured
    else
	echo Setup and Config Runtime.${extension}
	./setup
	./configure ${RUNTIME_OPTS}
	make clean
    fi

    # 2 is better than 1 :)
    make; make 
}

function use_normal_runtime() {
    build_runtime normal "${NORMAL_RUNTIME_OPTS}"
    use_runtime normal;
}

function use_prealloc_runtime() {
    build_runtime prealloc "${PREALLOC_RUNTIME_OPTS}"
    use_runtime prealloc;
}

function build_spec() {
    step=$1
    
    for test in ${SPEC_APPS}; do
	
	cd ${FLEX_DIR}

	mkdir -p results/spec/$test

	tmprootset=tmp/${test}-root-set
	
	rm -f $tmprootset
	echo "include Support/locale-root-set" > $tmprootset
	echo "spec.benchmarks.$test.Main.<init>()V" >> $tmprootset
	rootset=Support/${test}-root-set
	if [ -f $rootset ]; then
	    echo "include $rootset" >> $tmprootset
	fi

	build_spec_app$step $test ${FLEX_DIR}/SupportNP/specthunk.jar:${SPEC_DIR} spec.benchmarks.$test.Main "-r $tmprootset"  " "  "cd ${SPEC_DIR}/spec/benchmarks/$test"
    done
}

# 1    2         3
# name directory mainClass
function build_jolden_app1() {
    name=$1
    dir=$2
    mainClass=$3

    resultDir=${FLEX_DIR}/results/jolden/$name
    mkdir -p ${resultDir}

    export FLEXPATH=$dir
    
    echo
    echo Building normal version for $name
    execute_build_command "bin/build-precisec --ia-only-sync-removal $mainClass $name.normal"
    #rm -rf ${FLEX_DIR}/as$name.normal

    cd ${RUNTIME_DIR}
    rm run${name}sa
    ln -sf run${name}.normal run${name}sa
    echo Created link: `ls -l run${name}sa`
    echo Running normal version of ${name}
    cd $dir
    make flexrun > ${resultDir}/$name.normal.out 2> ${resultDir}/$name.normal.err

    echo
    echo Building instrumented version for $name
    execute_build_command "bin/build-precisec -W tmp/$name.an.txt $mainClass $name.instr"
    rm -rf ${FLEX_DIR}/as$name.instr

    cd ${RUNTIME_DIR}
    rm run${name}sa
    ln -sf run${name}.instr run${name}sa
    echo Created link: `ls -l run${name}sa`
    echo Running instrumented version of ${name}
    cd $dir
    make flexrun > ${resultDir}/$name.instr.out 2> ${resultDir}/$name.instr.err
    mv profile ${FLEX_DIR}/tmp/${name}.profile
    echo
    ls -l ${FLEX_DIR}/tmp/${name}.profile
    echo
}


# 1    2         3
# name directory mainClass
function build_jolden_app2() {
    name=$1
    dir=$2
    mainClass=$3
    resultDir=${FLEX_DIR}/results/jolden/$name

    echo
    echo build_jolden_app2: name=\"$name\"
    echo build_jolden_app2: dir=\"$dir\"
    echo build_jolden_app2: mainClass=\"$mainClass\"
    echo

    export FLEXPATH=$dir
    
    echo
    echo Building version with preallocation for $name
    execute_build_command "bin/build-precisec --prealloc-opt -Z tmp/${name}.an.txt,tmp/${name}.profile $mainClass ${name}.prealloc" | tee ${resultDir}/${name}.ia.stat
    #rm -rf ${FLEX_DIR}/as$name.prealloc

    cd ${RUNTIME_DIR}
    rm run${name}sa
    ln -sf run${name}.prealloc run${name}sa
    echo Running version with preallocation for ${name}
    cd $dir
    make flexrun > ${resultDir}/$name.prealloc.out 2> ${resultDir}/$name.prealloc.err
}

function build_jolden() {
    step=$1

    for test in ${JOLDEN_APPS}; do
	subdir=`echo $test | tr [:upper:] [:lower:]`
	build_jolden_app$step $test ${JOLDEN_DIR}/$subdir $test 
    done
}

mkdir -p ${FLEX_DIR}/tmp

use_normal_runtime;
#build_spec_app1 JLEX ${FLEX_DIR}/Support/Lex.jar JLex.Main " " Lexer.jlex "cd ${RUNTIME_DIR}"
#build_spec_app1 JCUP ${FLEX_DIR}/Support/CUP.jar java_cup.Main "-r Support/locale-root-set"  "< Parser.cup"  "cd ${RUNTIME_DIR}"
build_spec 1;
build_jolden 1;

#build_spec_app1 ScalarProduct "${HARPOON_DIR}/ScalarProduct" ScalarProduct " " " "  " "

use_prealloc_runtime;
#build_spec_app2 JLEX ${FLEX_DIR}/Support/Lex.jar JLex.Main " " Lexer.jlex "cd ${RUNTIME_DIR}"
#build_spec_app2 JCUP ${FLEX_DIR}/Support/CUP.jar java_cup.Main "-r Support/locale-root-set"  "< Parser.cup"  "cd ${RUNTIME_DIR}"
build_spec 2;
build_jolden 2;

#build_spec_app2 ScalarProduct "${HARPOON_DIR}/ScalarProduct" ScalarProduct " " " "  " "
