#!/bin/bash

HARPOON_DIR=$HOME/Harpoon
RUNTIME_DIR=${HARPOON_DIR}/Runtime
FLEX_DIR=${HARPOON_DIR}/Code
SPEC_DIR=$HOME/Spec/jvm98
JOLDEN_DIR=$HOME/jolden

# number of experiments to perform
nb_exp="1 2 3"

# all SPECjvm98 applications
#SPEC_APPS="_200_check _201_compress _202_jess _205_raytrace _209_db _222_mpegaudio _228_jack _213_javac"
#SPEC_APPS="_200_check _201_compress _205_raytrace _209_db _222_mpegaudio _228_jack"

#SPEC_APPS="_200_check"
#SPEC_APPS="_205_raytrace"
SPEC_APPS="_202_jess"
#SPEC_APPS="_228_jack"
#SPEC_APPS="_222_mpegaudio"
#SPEC_APPS="_999_checkit _209_db"
#SPEC_APPS="_209_db"
#SPEC_APPS=" _222_mpegaudio"
#SPEC_APPS="_201_compress"

# all Java OLDEN applications
#JOLDEN_APPS="BH BiSort Em3d Health MST Perimeter Power TreeAdd TSP Voronoi"

#JOLDEN_APPS="TreeAdd"
#JOLDEN_APPS="MST"
#JOLDEN_APPS="BH"
#JOLDEN_APPS="MST"
#JOLDEN_APPS="Power"

export FLEXRUN_ARGS="-Xmx 256"
TIME="time -p"


function save_result() {
    name=$1;
    prefix=$2;
    case $name in
	JCUP) mv parser.java ${resultDir}/parser.java.$prefix;;
	JLEX) mv Lexer.jlex.java ${resultDir}/Lexer.jlex.java.$prefix;;
    esac
}

# 1    2        3          4            5              6
# name flexPath mainClass  buildOptions testCaseParams specialCmd
function time_spec_app1() {
    name=$1
    flexPath=$2
    mainClass=$3
    buildOptions=$4
    testCaseParams=$5
    specialCmd=$6

    resultDir=${FLEX_DIR}/results/spec/$name
    mkdir -p ${resultDir}

    export FLEXPATH=$flexPath

    cd ${FLEX_DIR}

    echo Timing ${name} - normal version

    for i in first ${nb_exp}; do
	echo Test $i
	$specialCmd

	if [ "$testCaseParams" = "< Parser.cup" ] ; then
	    (${TIME} ${RUNTIME_DIR}/run$name.normal ${FLEXRUN_ARGS} < Parser.cup)  >  ${resultDir}/$name.normal.$i.time.out  2> ${resultDir}/$name.normal.$i.time
	else
	    (${TIME} ${RUNTIME_DIR}/run$name.normal ${FLEXRUN_ARGS} $testCaseParams)  > ${resultDir}/$name.normal.$i.time.out  2> ${resultDir}/$name.normal.$i.time
	fi;

	error=$?
	if [ $error -ne 0 ]; then
	    echo Error timing $name.nomal: $error;
	fi  
    done

    rm ${resultDir}/$name.normal.first.time.out
    rm ${resultDir}/$name.normal.first.time

    save_result $name time
}

# 1    2        3          4            5              6
# name flexPath mainClass  buildOptions testCaseParams specialCmd
function time_spec_app2() {
    name=$1
    flexPath=$2
    mainClass=$3
    buildOptions=$4
    testCaseParams=$5
    specialCmd=$6

    resultDir=${FLEX_DIR}/results/spec/$name

    cd ${FLEX_DIR}

    export FLEXPATH=$flexPath

    echo Timing ${name} - version with preallocation

    for i in first ${nb_exp}; do
	echo Test $i
	$specialCmd

	if [ "$testCaseParams" = "< Parser.cup" ] ; then
	    (${TIME} ${RUNTIME_DIR}/run$name.prealloc ${FLEXRUN_ARGS} < Parser.cup)  > ${resultDir}/$name.prealloc.$i.time.out  2> ${resultDir}/$name.prealloc.$i.time
	else
	    (${TIME} ${RUNTIME_DIR}/run$name.prealloc ${FLEXRUN_ARGS} $testCaseParams)  > ${resultDir}/$name.prealloc.$i.time.out  2> ${resultDir}/$name.prealloc.$i.time
	fi;

	error=$?
	if [ $error -ne 0 ]; then
	    echo Error timing $name.nomal: $error;
	fi
    done

    rm ${resultDir}/$name.prealloc.first.time.out
    rm ${resultDir}/$name.prealloc.first.time

    save_result $name time
}


function time_spec() {
    step=$1
    
    for test in ${SPEC_APPS}; do
	cd ${FLEX_DIR}
	tmprootset=tmp/${test}-root-set
	
	time_spec_app$step $test ${FLEX_DIR}/SupportNP/specthunk.jar:${SPEC_DIR} spec.benchmarks.$test.Main "-r $tmprootset"  " "  "cd ${SPEC_DIR}/spec/benchmarks/$test"
    done
}



function time_jolden_app_aux() {
    #precondition: we are in the right directory
    #and the necessary symbolic link are already in place!
    name=$1;
    ext=$2;

    #warm up the caches
    (make flexrun )> /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
	echo Error while timing $name: $error
	exit 1;
    fi

    for i in ${nb_exp}; do
	echo Test $i
	(${TIME} make flexrun) > ${resultDir}/$name.$ext.$i.time.out  2> ${resultDir}/$name.$ext.$i.time
	if [ $? -ne 0 ]; then
	    echo Error while timing $name: $error
	    exit 1;
	fi;
    done
}

# 1    2         3
# name directory mainClass
function time_jolden_app1() {
    name=$1
    dir=$2
    mainClass=$3

    resultDir=${FLEX_DIR}/results/jolden/$name
    mkdir -p ${resultDir}

    export FLEXPATH=$dir
    
    cd ${RUNTIME_DIR}
    rm run${name}sa
    ln -sf run${name}.normal run${name}sa

    echo Timing ${name} - normal version
    cd $dir


    time_jolden_app_aux $name normal
}


# 1    2         3
# name directory mainClass
function time_jolden_app2() {
    name=$1
    dir=$2
    mainClass=$3
    resultDir=${FLEX_DIR}/results/jolden/$name

    export FLEXPATH=$dir
    
    cd ${RUNTIME_DIR}
    rm run${name}sa
    ln -sf run${name}.prealloc run${name}sa

    echo Timing ${name} - version with preallocation
    cd $dir

    time_jolden_app_aux $name prealloc
}

function time_jolden() {
    step=$1

    for test in ${JOLDEN_APPS}; do
	subdir=`echo $test | tr [:upper:] [:lower:]`
	time_jolden_app$step $test ${JOLDEN_DIR}/$subdir $test 
    done
}


function use_runtime() {
    runtime=$1
    cd ${HARPOON_DIR}
    rm Runtime
    ln -sf Runtime.$runtime Runtime
}

function use_normal_runtime() {
    use_runtime normal;
}

function use_prealloc_runtime() {
    use_runtime prealloc;
}


mkdir -p ${FLEX_DIR}/tmp

use_normal_runtime;
#time_spec_app1 JLEX ${FLEX_DIR}/Support/Lex.jar JLex.Main " " Lexer.jlex "cd ${RUNTIME_DIR}"
#time_spec_app1 JCUP ${FLEX_DIR}/Support/CUP.jar java_cup.Main "-r Support/locale-root-set"  "< Parser.cup"  "cd ${RUNTIME_DIR}"
time_spec 1;
time_jolden 1;

echo "---------------------"

use_prealloc_runtime;
#time_spec_app2 JLEX ${FLEX_DIR}/Support/Lex.jar JLex.Main " " Lexer.jlex "cd ${RUNTIME_DIR}"
#time_spec_app2 JCUP ${FLEX_DIR}/Support/CUP.jar java_cup.Main "-r Support/locale-root-set"  "< Parser.cup"  "cd ${RUNTIME_DIR}"
time_spec 2;
time_jolden 2;
