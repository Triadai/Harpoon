dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Revision: 1.109 $)dnl
AC_INIT(include/jni.h)
AC_CONFIG_AUX_DIR(scripts)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(flexrun, 0.0)
AM_CONFIG_HEADER(include/config.h)
AC_PREREQ(2.13) # require autoconf version 2.13
AC_DISABLE_SHARED # by default --disable-shared

AC_SUBST(AS) AS='as'
AC_SUBST(ASFLAGS) ASFLAGS=''
AC_SUBST(CFLAGS) CFLAGS='-g' 
AC_SUBST(IFLAGS) IFLAGS='' 
AC_SUBST(GC_LIB) GC_LIB='' 
AC_SUBST(BDWFLAGS) BDWFLAGS='' dnl for B-D-W garbage collector build.

dnl Checks for programs.
AC_PROG_CC # also sets cross_compiling variable
AC_SUBST(HOSTCC) HOSTCC=${HOSTCC:=$CC} # for local helper executables.
AC_PROG_AWK
AC_PROG_RANLIB
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET
AM_MAINTAINER_MODE
AC_PATH_PROG(FORTUNE, fortune, /usr/games/fortune)
AC_SUBST(FORTUNE)
AM_CONDITIONAL(CROSS_COMPILING, test x$cross_compiling = xyes)

dnl Checks for libraries.
AC_CHECK_LIB(m, atan2) # link in math library.
   dnl don't sweat it if the next two libraries aren't found.
AC_CHECK_LIB(iberty, hex_init)
AC_CHECK_LIB(bfd, bfd_init)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/types.h sys/time.h)
 dnl check for FIONREAD in sys/ioctl.h
AC_MSG_CHECKING([for FIONREAD ioctl])
AC_EGREP_CPP(yes,
[#include <sys/ioctl.h>
#ifdef FIONREAD
  yes
#endif
], flexrun_has_fionread=yes, flexrun_has_fionread=no)
if test x$flexrun_has_fionread = xyes ; then
    AC_DEFINE(HAVE_IOCTL_FIONREAD, 1,
	      [Define if <sys/ioctl.h> defines a FIONREAD ioctl.])
fi
AC_MSG_RESULT($flexrun_has_fionread)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_OFF_T
AC_CACHE_CHECK([whether the system uses the O_BINARY flag],
	flexrun_cv_sys_obinary, AC_EGREP_CPP(yes, [
#include <fcntl.h>
#ifdef O_BINARY
 yes
#endif
], flexrun_cv_sys_obinary=yes, flexrun_cv_sys_obinary=no))
if test $flexrun_cv_sys_obinary != yes; then
  AC_DEFINE(O_BINARY, 0,
    [Define if your system doesn't support (or need) the O_BINARY flag])
fi

dnl Determine size of pointer types.
AC_ARG_WITH(pointer-size,
[  --with-pointer-size	  specify sizeof(void *) when cross-compiling],
  unset ac_cv_sizeof_void_p
  with_pointer_size=$withval, with_pointer_size=0 )
AC_CHECK_SIZEOF(void *, $with_pointer_size)
if test 0$ac_cv_sizeof_void_p -eq 0; then
  AC_MSG_ERROR([Cannot determine size of void *; use --with-pointer-size.])
fi

dnl Checks whether extern C functions have underscores prepended.
AC_CACHE_CHECK(for _ prefix on C symbol names, flexrun_cv_asm_underscores,
	[AC_TRY_LINK([asm("_flexrun_foobar:");], [flexrun_foobar();],
	flexrun_cv_asm_underscores=yes,
	flexrun_cv_asm_underscores=no)]);
if test $flexrun_cv_asm_underscores = no; then
	AC_DEFINE(NO_UNDERSCORES, 1,
		[Define if there is no _ prefix on C symbol names])
fi

dnl Checks for aout-style or elf-style segment declarations
AC_ARG_WITH(segment-type,
[  --with-segment-type={elf,aout} specify segment type (if autoconf can't guess)],
flexrun_cv_asm_segment_style=$withval,
AC_CACHE_CHECK(for segment declaration style, flexrun_cv_asm_segment_style,
	[AC_TRY_COMPILE([asm(".section foobar");],,
	flexrun_cv_asm_segment_style=elf,
	AC_TRY_COMPILE([asm(".text 0");],,
	flexrun_cv_asm_segment_style=aout,
	flexrun_cv_asm_segment_style=unknown))]))
if test "$flexrun_cv_asm_segment_style" = aout; then
	AC_DEFINE(AOUT_SEGMENTS, 1,
	[Define if this target uses a.out-style segments (data/text/bss only)])
elif test "$flexrun_cv_asm_segment_style" = elf; then
	AC_DEFINE(ELF_SEGMENTS, 1,
	[Define if this target uses ELF-style segments (arbitrary names)])
else
	AC_MSG_ERROR([Cannot determine proper segment declaration format.])
fi
AM_CONDITIONAL(AOUT_BUILD, test $flexrun_cv_asm_segment_style = aout)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL  # sometimes needed for ioctl to work properly.
AC_CHECK_FUNCS(select, ,AC_MSG_ERROR([select() not found]))
AC_CHECK_FUNCS(nanosleep usleep sleep) # find some sleep function.
 dnl needed to set java properties, but not always available:
AC_CHECK_FUNCS(uname getcwd localtime)
 dnl emmett's environment doesn't support fsync.
AC_CHECK_FUNCS(fsync) # used in java.io.FileDescriptor.sync() impl
 dnl stripped-down platforms might not support networking.
AC_CHECK_FUNC(socket, build_java_net=yes, build_java_net=no)
AM_CONDITIONAL(BUILD_JAVA_NET, test x$build_java_net = xyes)

dnl Checks for build options follow.
object_padding=0 # several transformations might increment this.
masked_pointers=no # several transformations might require this.

dnl process 'all static' option to produce a complete statically-linked
dnl executable.  Without this option, the Runtime will be statically linked
dnl to the binary, but libc and other system libraries will be dynamically
dnl linked.
AC_MSG_CHECKING([all static flag])
AC_ARG_WITH(all-static,
[  --with-all-static       create a completely static binary],
with_all_static="$withval", with_all_static="no")
AC_SUBST(STATIC_FLAG)
case "$with_all_static" in
yes)  STATIC_FLAG="-all-static" ;;
*)    STATIC_FLAG="-static" ;;
esac
AC_MSG_RESULT($with_all_static (using $STATIC_FLAG))

dnl process option for 'precise c' backend.
AC_MSG_CHECKING([precise c backend])
AC_ARG_WITH(precise-c,
[  --with-precise-c        use 'precise c' backend],
with_precise_c="$withval", with_precise_c="no")
case "$with_precise_c" in
yes)	AC_MSG_RESULT([yes])
	AC_DEFINE(WITH_PRECISE_C_BACKEND, 1,
	[Define if you're using code generated with the 'precise c' backend])
	;;
*)	AC_MSG_RESULT([no])
	;;
esac
AM_CONDITIONAL(PRECISE_C_BACKEND, test $with_precise_c = yes)

dnl process option for Role Inference support
AC_MSG_CHECKING([for role inference support])
AC_ARG_WITH(role-infer,
[  --with-role-infer       incorporate Role Inference support],
with_role_infer="$withval", with_role_infer="no")
case "$with_role_infer" in
yes)	AC_MSG_RESULT([yes])
	AC_DEFINE(WITH_ROLE_INFER, 1,
	[Define if you want Role Inference support])
	dnl Objects get an extra field in the role inference
	object_padding=$(($object_padding + 8))
	;;
*)	AC_MSG_RESULT([no])
	;;
esac
AM_CONDITIONAL(ROLE_INFER, test $with_role_infer = yes)

dnl process option for Realtime Java support.
AC_MSG_CHECKING([for realtime java support])
AC_ARG_WITH(realtime-java,
[  --with-realtime-java[={yes,full,stubs,fake,threads}][,noheap][,debug[-ref]][,gc-stats][,timer]],
with_realtime_java="$withval", with_realtime_java="no")
with_realtime_java_stubs=no
case ",$with_realtime_java," in
,yes* | ,full, | ,threads*) AC_MSG_RESULT([yes])
	AC_DEFINE(WITH_REALTIME_JAVA, 1,
	[Define if you want Realtime Java support])
	dnl Objects get an extra field in the realtime java transformation
	object_padding=$(($object_padding + 4))
	dnl realtime java stashes info in the low bits of pointers
	;;
,stubs, | ,stubs,gc-stats,)	AC_MSG_RESULT([stubs])
	AC_DEFINE(WITH_REALTIME_JAVA_STUBS, 1,
	[Define if you want to incorporate stubs for RTJ support, but no real support])
	with_realtime_java_stubs=yes
	;;
,fake,)	AC_MSG_RESULT([fake])
	AC_DEFINE(WITH_REALTIME_JAVA_STUBS, 1,
	[Define if you want to incorporate stubs for RTJ support, but no real support])
	AC_DEFINE(WITH_FAKE_SCOPES, 1,
	[Define if you want fake scopes to accompany the FAKE_SCOPES compiler option])
	with_realtime_java_stubs=yes
	;;
*)	AC_MSG_RESULT([no])
	;;
esac
AC_MSG_CHECKING([for realtime java new threads support])
case ",$with_realtime_java," in
,full, | ,threads*) AC_MSG_RESULT([yes])
	AC_DEFINE(WITH_REALTIME_THREADS, 1,
	[Define if you want to incorporate new realtime thread support])
	with_realtime_threads=yes
	;;
*)	AC_MSG_RESULT([no])
	with_realtime_threads=no
	;;
esac
AC_MSG_CHECKING([for realtime java NoHeapRealtimeThread support])
case ",$with_realtime_java," in
,yes*noheap* | ,full, | ,threads*noheap*) AC_MSG_RESULT([yes])
	AC_DEFINE(WITH_NOHEAP_SUPPORT, 1,
	[Define if you want NoHeapRealtimeThread support])
	masked_pointers=yes
	;;
*)	AC_MSG_RESULT([no])
	;;
esac 
AC_MSG_CHECKING([for debugging info for RTJ programs (no compiler support)])
case ",$with_realtime_java," in
*,debug*)	AC_MSG_RESULT([yes])
	AC_DEFINE(RTJ_DEBUG, 1,
	[Define if you want debugging support for RTJ programs (no compiler support)])
	;;
*)	AC_MSG_RESULT([no])
	;;
esac
AC_MSG_CHECKING([for debugging info for RTJ programs (with DEBUG_REF option)])
case ",$with_realtime_java," in
*,debug-ref*) AC_MSG_RESULT([yes])
	AC_DEFINE(RTJ_DEBUG_REF, 1,
	[Define if you want debugging support for RTJ programs (with DEBUG_REF option)])
	;;
*)	AC_MSG_RESULT([no])
	;;
esac
AC_MSG_CHECKING([for GC pause-time statistics for RTJ programs])
case ",$with_realtime_java," in
*,gc-stats*) AC_MSG_RESULT([yes])
	AC_DEFINE(WITH_GC_STATS, 1,
	[Define if you want GC pause-time statistics for RTJ programs])
	;;
*)	AC_MSG_RESULT([no])
	;;
esac
AC_MSG_CHECKING([for timing of RTJ-internal calls])
case ",$with_realtime_java," in
*,timer*) AC_MSG_RESULT([yes])
	AC_DEFINE(RTJ_TIMER, 1,
	[Define if you want RTJ-internal call timings])
	;;
*)	AC_MSG_RESULT([no])
	;;
esac

AM_CONDITIONAL(REALTIME_JAVA, test $with_realtime_java != no)
AM_CONDITIONAL(REALTIME_JAVA_STUBS, test $with_realtime_java_stubs = yes)
AM_CONDITIONAL(REALTIME_JAVA_THREADS, test $with_realtime_threads = yes)

dnl process option to select full stack trace on exceptions.
AC_MSG_CHECKING([stack trace verbosity])
AC_ARG_WITH(full-stack-trace,
[  --with-full-stack-trace show all frames in exception trace],
full_stack_trace="$withval", full_stack_trace="no")
case "$full_stack_trace" in
yes)	AC_MSG_RESULT([full])
	AC_DEFINE(FULL_STACK_TRACE, 1,
		  [Define if you want native frames shown in exception traces])
	;;
*)	AC_MSG_RESULT([none (emulate jvm)])
	;;
esac

dnl process option to select profiling
AC_MSG_CHECKING([whether to compile for profiling with gprof])
AC_ARG_WITH(profiling,
[  --with-profiling        compile for profiling with gprof],
with_profiling="$withval", with_profiling="no")
case "$with_profiling" in
yes)	AC_MSG_RESULT([yes])
	CFLAGS="-pg $CFLAGS"
	;;
*)	AC_MSG_RESULT([no])
	;;
esac

dnl process option to select threading model.
AC_MSG_CHECKING([threading model])
AC_ARG_WITH(thread-model,
[  --with-thread-model={[none],pth,heavy,user} select threading model to use],
thread_model="$withval", thread_model="none")
case "$thread_model" in
user)  AC_MSG_RESULT([user space threads])
	AC_DEFINE(WITH_USER_THREADS, 1,
		  [Define if you want to use user thread support])
	CFLAGS="-DGC_USER_THREADS $CFLAGS"
	BDWFLAGS="-DGC_USER_THREADS -D_REENTRANT -I../../src/user/"
	;;
heavy)  AC_MSG_RESULT([heavy-weight threads])
	AC_DEFINE(WITH_HEAVY_THREADS, 1,
		  [Define if you want to use heavyweight thread support])
	CFLAGS="$CFLAGS -D_REENTRANT"
	AC_SEARCH_LIBS(pthread_create, pthread, ,
		      AC_MSG_ERROR([couldn't find pthread library]))
	dnl Check for pthread_rwlock_t support.
	AC_MSG_CHECKING([for pthread_rwlock_t support])
	have_pthread_rwlock_t=yes
	AC_TRY_COMPILE([#include <pthread.h>],
	[pthread_rwlock_t rwlock=PTHREAD_RWLOCK_INITIALIZER;],
	AC_MSG_RESULT([okay.]),
	dnl didn't find rwlock_t.  try defining _XOPEN_SOURCE=500
	oldcflags="$CFLAGS"
	CFLAGS="$CFLAGS -D_XOPEN_SOURCE=500"
	AC_TRY_COMPILE([#include <pthread.h>],
	[pthread_rwlock_t rwlock=PTHREAD_RWLOCK_INITIALIZER;],
	AC_MSG_RESULT([-D_XOPEN_SOURCE=500 needed.]),
	AC_MSG_RESULT([not found.  installing work-around.])
	CFLAGS="$oldcflags"
	have_pthread_rwlock_t=no))
	if test x$have_pthread_rwlock_t = xyes; then
		AC_DEFINE(HAVE_PTHREAD_RWLOCK_T, 1,
		    [Define if your pthread library includes pthread_rwlock_t])
	fi
	# the BDW garbage collector needs to know which particular pthreads
	# implementation we're using.  I don't know how to test this at the
	# moment ... we'll just assume LinuxThreads.
	CFLAGS="-DGC_LINUX_THREADS $CFLAGS"
	BDWFLAGS="-DGC_LINUX_THREADS -D_REENTRANT"
	;;
pth)	AC_MSG_RESULT([GNU pth])
	AC_DEFINE(WITH_PTH_THREADS, 1,
		  [Define if you want to use GNU pth thread support])
	AC_SEARCH_LIBS(pth_init, pth, ,
			AC_MSG_ERROR([couldn't find pth library]))
	BDWFLAGS="-DGNUPTH_THREADS"
	;;
none)   AC_MSG_RESULT([no thread support])
	AC_DEFINE(WITH_NO_THREADS, 1,
		  [Define if you want no thread support])
	;;
*)	AC_MSG_ERROR([unknown threading model: $thread_model]) ;;
esac
AM_CONDITIONAL(USER_THREADS, test "$thread_model" = "user")	
if test $thread_model != none; then
	AC_DEFINE(WITH_THREADS, 1,
		  [Define if you want support for threads])
fi

dnl process option to select garbage collector
AC_MSG_CHECKING([garbage collector])
AC_ARG_WITH(gc,
[  --with-gc={[none],conservative,semi,copying,marksweep,generational} select garbage collector to use],
gc_type="$withval", gc_type="none")
case "$gc_type" in
semi)
	AC_MSG_RESULT([semi-precise gc])
	AC_DEFINE(WITH_SEMI_PRECISE_GC, 1,
		  [Define if you want semi-precise garbage collection])
	;;
copying)
	AC_MSG_RESULT([precise stop-and-copy gc])
	AC_DEFINE(WITH_COPYING_GC, 1,
	        [Define if you are using the stop-and-copy garbage collector])
	;;
marksweep)
	AC_MSG_RESULT([precise mark-and-sweep gc])
	AC_DEFINE(WITH_MARKSWEEP_GC, 1,
		[Define if you are using the mark-and-sweep garbage collector])
	;;
generational)
	AC_MSG_RESULT([precise generational gc])
	AC_DEFINE(WITH_GENERATIONAL_GC, 1,
		[Define if you are using the generational garbage collector])
	;;
conservative)
	AC_MSG_RESULT([B-D-W conservative gc])
	AC_DEFINE(WITH_CONSERVATIVE_GC, 1,
		[Define if you are using the plain (not semi) conservative gc])
	;;
none)	AC_MSG_RESULT([no garbage collection])
	AC_DEFINE(WITH_NO_GC, 1,
		[Define if you are not using any garbage collector])
	;;
*)	AC_MSG_ERROR([unknown garbage collector: $gc_type])	
	;;
esac
if test $gc_type = semi -o $gc_type = conservative; then
	AC_DEFINE(BDW_CONSERVATIVE_GC, 1,
    	[Define if you are using the B-D-W conservative garbage collector])
	GC_LIB="Contrib/gc/libgc.la"
	AC_CONFIG_SUBDIRS(Contrib/gc)
fi	
if test $gc_type = copying -o $gc_type = marksweep -o $gc_type = generational; then
	AC_DEFINE(WITH_PRECISE_GC, 1,
		  [Define if you want support for precise garbage collection])
fi
AC_LINK_FILES(Contrib/gc/include/gc.h, include/gc.h)
AC_LINK_FILES(Contrib/gc/include/gc_pthread_redirects.h, include/gc_pthread_redirects.h)
AC_LINK_FILES(Contrib/gc/include/gc_typed.h, include/gc_typed.h)
AC_LINK_FILES(Contrib/gc/include/private/gcconfig.h, include/gcconfig.h)
AM_CONDITIONAL(CONSERVATIVE_GC,
	test $gc_type = conservative -o $gc_type = semi)
AM_CONDITIONAL(PRECISE_GC,
	test $gc_type = copying -o $gc_type = marksweep -o $gc_type = semi -o $gc_type = generational)
AM_CONDITIONAL(COPYING_GC, test $gc_type = copying)
AM_CONDITIONAL(MARKSWEEP_GC, test $gc_type = marksweep)
AM_CONDITIONAL(SEMI_PRECISE_GC, test $gc_type = semi)
AM_CONDITIONAL(GENERATIONAL_GC, test $gc_type = generational)

dnl process option for using pointer-reversal in mark-and-sweep garbage 
dnl collection.
AC_MSG_CHECKING([whether to use pointer-reversal in mark-and-sweep gc])
AC_ARG_WITH(pointer-reversal,
[  --with-pointer-reversal use pointer-reversal in mark-and-sweep gc],
with_pointer_reversal="$withval", with_pointer_reversal="no")
case "$with_pointer_reversal" in
yes)	AC_MSG_RESULT([yes])
	AC_DEFINE(WITH_POINTER_REVERSAL, 1,
	[Define if you want to use pointer-reversal in the mark-and-sweep gc])
	;;
*)	AC_MSG_RESULT([no])
	;;
esac

dnl process option for single-word aligned allocations.
dnl (x86 and strongARM don't require double-word alignment of double-word
dnl  quantities)
AC_MSG_CHECKING([desired object allocation alignment])
AC_ARG_WITH(single-word-align,
[  --with-single-word-align single-word align allocations],
with_single_word_align="$withval", with_single_word_align="no")
case "$with_single_word_align" in
yes)	AC_MSG_RESULT([single-word])
	AC_DEFINE(WITH_SINGLE_WORD_ALIGN, 1,
	[Define if you want allocations to be single-word aligned])
	;;
*)	AC_MSG_RESULT([double-word])
	;;
esac

dnl experimental support for clustered heaps.
AC_MSG_CHECKING([for experimental clustered heap support])
AC_ARG_WITH(clustered-heaps,
[  --with-clustered-heaps  build experimental clustered heap support],
with_clustered_heaps=yes
AC_DEFINE(WITH_CLUSTERED_HEAPS, 1,
    [Define if you want to build the experimental clustered heap support]),
with_clustered_heaps=no)
AC_MSG_RESULT($with_clustered_heaps)
AM_CONDITIONAL(CLUSTERED_HEAPS, test $with_clustered_heaps = yes)

dnl experimental support for event-driven code.
AC_MSG_CHECKING([for experimental event-driven support])
AC_ARG_WITH(event-driven,
[  --with-event-driven     build experimental event-driven support],
with_event_driven=yes
AC_DEFINE(WITH_EVENT_DRIVEN, 1,
    [Define if you want to build the experimental event-driven code support]),
with_event_driven=no)
AC_MSG_RESULT($with_event_driven)
AM_CONDITIONAL(EVENT_DRIVEN, test $with_event_driven = yes)

dnl experimental support for camera code.
AC_MSG_CHECKING([for experimental camera support])
AC_ARG_WITH(camera,
[  --with-camera           build experimental camera support (see src/cam/README for licensing terms)], with_camera=yes, with_camera=no)
AC_MSG_RESULT($with_camera)
AM_CONDITIONAL(CAMERA, test "$with_camera" = "yes")
if test "$with_camera" = "yes"; then
	AC_DEFINE(WITH_CAMERA, 1,
	    [Define if you want to build the experimental camera code support])
	dnl Kernel header uses ulong typedef, ugh.
	AC_MSG_CHECKING([whether sys/types.h defines ulong typedef])
	AC_TRY_COMPILE([#include <sys/types.h>],[ulong blah;],
			AC_MSG_RESULT([yes]),
			dnl Try defining _GNU_SOURCE
			oldcflags="$CFLAGS"
			CFLAGS="$CFLAGS -D_GNU_SOURCE"
			AC_TRY_COMPILE([#include <sys/types.h>],[ulong blah;],
			AC_MSG_RESULT([-D_GNU_SOURCE needed.]),
			AC_MSG_RESULT([no.])
			AC_MSG_ERROR([Can't find a definition for ulong.])))
fi

dnl support for initialization-check rewrite.
AC_MSG_CHECKING([for initialization transformation support])
AC_ARG_WITH(init-check,
[  --without-init-check	  don't build experimental initializer trans. support],
with_init_check=$withval, with_init_check=yes) # default is 'yes'
if test x$with_init_check = xyes; then
  AC_DEFINE(WITH_INIT_CHECK, 1,
         [Define to build the experimental initializer transformation support])
fi
AC_MSG_RESULT($with_init_check)

dnl experimental support for transaction rewrite.
AC_MSG_CHECKING([for experimental transactions support])
AC_ARG_WITH(transactions,
[  --with-transactions	  build experimental transactions trans. support],
with_transactions=$withval, with_transactions=no) # default is 'no'
if test x$with_transactions = xyes; then
  AC_DEFINE(WITH_TRANSACTIONS, 1,
        [Define to build the experimental transactions transformation support])
fi
AM_CONDITIONAL(TRANSACTIONS, test x$with_transactions = xyes)
AC_MSG_RESULT($with_transactions)

dnl experimental support for mostly-zero fields transformations.
AC_MSG_CHECKING([for experimental mostly-zero fields support])
AC_ARG_WITH(mzf,
[  --with-mzf	  build experimental mostly-zero fields support],
with_mzf_support=$withval, with_mzf_support=no) # default is 'no'
if test x$with_mzf_support = xyes; then
  AC_DEFINE(WITH_MZF_SUPPORT, 1,
        [Define to build the experimental mostly-zero fields support])
fi
AM_CONDITIONAL(MZF_SUPPORT, test x$with_mzf_support = xyes)
AC_MSG_RESULT($with_mzf_support)

dnl experimental support for claz compression.
AC_MSG_CHECKING([for experimental claz compression support])
AC_ARG_WITH(claz-shrink,
[  --with-claz-shrink=N	  compress claz pointers to N bytes (experimental)],
with_claz_shrink=$withval, with_claz_shrink=no) # default is 'no'
if test x$with_claz_shrink = xyes; then
  with_claz_shrink=4
fi
if test x$with_claz_shrink = xno; then
  AC_MSG_RESULT($with_claz_shrink)
else
  AC_DEFINE_UNQUOTED(WITH_CLAZ_SHRINK, $with_claz_shrink,
        [Define to compress claz pointers to WITH_CLAZ_SHRINK bytes])
  AC_MSG_RESULT("$with_claz_shrink bytes")
fi

dnl select whether to collect and print statistics
AC_MSG_CHECKING([whether to collect and print statistics])
AC_ARG_WITH(statistics,
[  --with-statistics       collect and print execution statistics],
with_statistics=yes, with_statistics=no)
AC_MSG_RESULT($with_statistics)

dnl select whether to collect and print memory statistics
AC_MSG_CHECKING([whether to collect and print memory statistics])
AC_ARG_WITH(memory-statistics,
[  --with-memory-statistics collect and print memory statistics],
with_memory_statistics=yes, with_memory_statistics=no)
AC_MSG_RESULT($with_memory_statistics)

dnl set #defines and AM_CONDITIONALs for various statistics.
if test x$with_memory_statistics = xyes; then
	with_statistics=yes # memory statistics imply regular statistics.
	AC_DEFINE(WITH_MEMORY_STATISTICS, 1,
    	[Define if you want to collect and print memory statistics])
fi
if test x$with_statistics = xyes; then
	AC_DEFINE(WITH_STATISTICS, 1,
    	[Define if you want to collect and print execution statistics])
fi
AM_CONDITIONAL(STATISTICS, test $with_statistics = yes)

dnl some transformations pad java.lang.Object with extra fields.
dnl (object_padding should is initialized to zero higher up in this file)
AC_MSG_CHECKING([the padding of java.lang.Object])
AC_ARG_WITH(object-padding,
[  --with-object-padding={n} Objects have 'n' bytes of fields (default 0)],
object_padding="$withval", )
AC_DEFINE_UNQUOTED(OBJECT_PADDING, $object_padding,
          [Number of field bytes of java.lang.Object has (default 0)])
AC_MSG_RESULT("$object_padding bytes")

dnl some transformations stash extra information in the low-bits of pointers.
dnl (for better debugging, this option is off by default;
dnl  masked_pointers is initialized to 'no' higher up in this file)
AC_MSG_CHECKING([whether to zero the low bits of pointers before use])
AC_ARG_WITH(masked-pointers,
[  --with-masked-pointers  Zero out the low bits of pointers before use],
masked_pointers="$withval", )
if test x$masked_pointers = xyes; then
  AC_DEFINE(WITH_MASKED_POINTERS, 1,
        [Define to zero the low bits of pointers before their use])
fi
AC_MSG_RESULT($masked_pointers)

dnl Find out how to set time zone.  This is way down here because we
dnl want to make sure it's tested *after* we set _XOPEN_SOURCE or
dnl _GNU_SOURCE or what-have-you.
dnl ** Never cache these results (because they are dependent on the setting
dnl    of _XOPEN_SOURCE, _GNU_SOURCE, etc, above) **
unset ac_cv_struct_tm ac_cv_struct_tm_zone ac_cv_var_tzname
AC_STRUCT_TIMEZONE

dnl set up dmalloc.  Last because gcc-based tests won't work after we add
dnl -ldmalloc to LIBS (because $(prefix) isn't set during autoconf).
AC_MSG_CHECKING([for dmalloc support])
AC_ARG_WITH(dmalloc,
[  --with-dmalloc	  use debugging malloc from www.dmalloc.com],
test "$withval" = yes && withval='$(prefix)'
test "$withval" || withval='$(prefix)'
AC_DEFINE(WITH_DMALLOC, 1,
    [Define if you are using the debugging malloc from www.dmalloc.com])
IFLAGS="$IFLAGS -I${withval}/include"
LDFLAGS="$LDFLAGS -L${withval}/lib"
if test x$thread_model = xheavy; then
	AC_MSG_RESULT([yes (threaded)])
	LIBS="$LIBS -ldmallocth"
else
	AC_MSG_RESULT([yes (not threaded)])
	LIBS="$LIBS -ldmalloc"
fi, AC_MSG_RESULT([no]))

dnl Match the CPU to an arch/ directory.
case "$target_cpu" in
arm*) archdir=arm32   
      AC_DEFINE(LONG_AND_DOUBLE_ARE_REVERSED, 1,
      [Define if your system stores doubles in reverse endianness])
      dnl StrongARM requires a software floating-point library.
      LIBS="-lfloat $LIBS"
	;;
sparc) archdir=sparc32 ;;
sparc64) archdir=sparc64 ;;
i?86) archdir=ix86 ;;
mips) archdir=mips ;;
*)    AC_MSG_ERROR([no port for $target_cpu]) ;;
esac
AM_CONDITIONAL(ARM32, test $archdir = arm32)
AM_CONDITIONAL(I386, test $archdir = ix86)
AC_SUBST(ARCHDIR) ARCHDIR=${archdir}

dnl check to see if we have stack tracing code for this architecture
AC_MSG_CHECKING([for stack tracing support])
if test -f arch/${archdir}/stack.h ; then
  AC_DEFINE(HAVE_STACK_TRACE_FUNCTIONS, 1,
    [Define iff your target has stack tracing code in arch/<foo>/stack.h])
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING(link script for $target_cpu)
CC="$CC" scripts/gen-link-script > arch/${archdir}/link-script
AC_MSG_RESULT(created in arch/${archdir}/link-script)

AC_LINK_FILES(arch/${archdir}, include/asm)
AC_OUTPUT(Makefile arch/Makefile
	  arch/arm32/Makefile arch/sparc32/Makefile arch/sparc64/Makefile
	  arch/ix86/Makefile arch/mips/Makefile
	  Contrib/Makefile
	  src/Makefile src/jni/Makefile src/cam/Makefile
	  src/java.io/Makefile src/java.lang/Makefile
	  src/java.lang.reflect/Makefile src/java.net/Makefile
	  src/java.util/Makefile src/java.util.zip/Makefile
	  src/clheap/Makefile src/nativeio/Makefile src/gc/Makefile
	  src/stats/Makefile src/user/Makefile src/realtime/Makefile
	  src/transact/Makefile src/roles/Makefile src/mzf/Makefile
	  scripts/flexrun-config)
