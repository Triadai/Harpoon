dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Revision: 1.22 $)dnl
AC_INIT(include/jni.h)
AC_CONFIG_AUX_DIR(scripts)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(flexrun, 0.0)
AM_CONFIG_HEADER(include/config.h)
AC_PREREQ(2.13) dnl require autoconf version 2.13

AC_SUBST(IFLAGS) IFLAGS='' 
AC_SUBST(GC_LIB) GC_LIB='' 

dnl Checks for programs.
AC_PROG_CC
AC_PROG_AWK
AC_PROG_RANLIB
AM_PROG_LIBTOOL
AC_PATH_PROG(FORTUNE, fortune, /usr/games/fortune)
AC_SUBST(FORTUNE)

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/types.h sys/time.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_OFF_T
AC_CACHE_CHECK([whether the system uses the O_BINARY flag],
	flexrun_cv_sys_obinary, AC_EGREP_CPP(yes, [
#include <fcntl.h>
#ifdef O_BINARY
 yes
#endif
], flexrun_cv_sys_obinary=yes, flexrun_cv_sys_obinary=no))
if test $flexrun_cv_sys_obinary != yes; then
  AC_DEFINE(O_BINARY, 0,
    [Define if your system doesn't support (or need) the O_BINARY flag])
fi

dnl Determine size of pointer types.
AC_ARG_WITH(pointer-size,
[  --with-pointer-size	  specify sizeof(void *) when cross-compiling],
  unset ac_cv_sizeof_void_p
  with_pointer_size=$withval, with_pointer_size=0 )
AC_CHECK_SIZEOF(void *, $with_pointer_size)
if test 0$ac_cv_sizeof_void_p -eq 0; then
  AC_MSG_ERROR([Cannot determine size of void *; use --with-pointer-size.])
fi

dnl Checks whether extern C functions have underscores prepended.
AC_CACHE_CHECK(for _ prefix on C symbol names, flexrun_cv_asm_underscores,
	[AC_TRY_LINK([asm("_flexrun_foobar:");], [flexrun_foobar();],
	flexrun_cv_asm_underscores=yes,
	flexrun_cv_asm_underscores=no)]);
if test $flexrun_cv_asm_underscores = no; then
	AC_DEFINE(NO_UNDERSCORES, 1,
		[Define if there is no _ prefix on C symbol names])
fi

dnl Checks for aout-style or elf-style segment declarations
AC_CACHE_CHECK(for segment declaration style, flexrun_cv_asm_segment_style,
	[AC_TRY_COMPILE([asm(".section foobar");],,
	flexrun_cv_asm_segment_style=elf,
	AC_TRY_COMPILE([asm(".text 0");],,
	flexrun_cv_asm_segment_style=aout,
	flexrun_cv_asm_segment_style=unknown))]);
if test $flexrun_cv_asm_segment_style = aout; then
	AC_DEFINE(AOUT_SEGMENTS, 1,
	[Define if this target uses a.out-style segments (data/text/bss only)])
elif test $flexrun_cv_asm_segment_style = elf; then
	AC_DEFINE(ELF_SEGMENTS, 1,
	[Define if this target uses ELF-style segments (arbitrary names)])
else
	AC_MSG_ERROR([Cannot determine proper segment declaration format.])
fi

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL  dnl sometimes needed for ioctl to work properly.
AC_CHECK_FUNCS(select, ,AC_MSG_ERROR([select() not found]))
AC_CHECK_LIB(m, atan2) dnl link in math library.

dnl process option to select threading model.
AC_MSG_CHECKING([threading model])
AC_ARG_WITH(thread-model,
[  --with-thread-model={none,heavy}   select threading model to use],
thread_model="$withval", thread_model="none")
case "$thread_model" in
heavy)  AC_MSG_RESULT([heavy-weight threads])
	AC_DEFINE(WITH_HEAVY_THREADS, 1,
		  [Define if you want to use heavyweight thread support])
	AC_SEARCH_LIBS(pthread_create, pthread, ,
		      AC_MSG_ERROR([couldn't find pthread library]))
	;;
none)   AC_MSG_RESULT([no thread support])
	AC_DEFINE(WITH_NO_THREADS, 1,
		  [Define if you want no thread support])
	;;
*)	AC_MSG_ERROR([unknown threading model: $thread_model]) ;;
esac

dnl process option to compile with conservative garbage collection.
AC_ARG_WITH(conservative-gc,
[  --with-conservative-gc  use B-D-W conservative garbage collector],
AC_DEFINE(BDW_CONSERVATIVE_GC, 1,
    [Define if you are using the B-D-W conservative garbage collector])
AC_LINK_FILES(Contrib/gc/gc.h, include/gc.h)
GC_LIB="Contrib/gc/gc.a")

dnl set up dmalloc.  Last because gcc-based tests won't work after we add
dnl -ldmalloc to LIBS (because $(prefix) isn't set during autoconf).
AC_ARG_WITH(dmalloc,
[  --with-dmalloc	  use debugging malloc from ftp.letters.com],
test "$withval" = yes && withval='$(prefix)'
test "$withval" || withval='$(prefix)'
AC_DEFINE(WITH_DMALLOC, 1,
    [Define if you are using the debugging malloc from ftp.letters.com])
IFLAGS="$IFLAGS -I${withval}/include"
LDFLAGS="$LDFLAGS -L${withval}/lib"
LIBS="$LIBS -ldmalloc")

dnl Match the CPU to an arch/ directory.
case "$target_cpu" in
arm*) archdir=arm32   
      AC_DEFINE(LONG_AND_DOUBLE_ARE_REVERSED, 1,
      [Define if your system stores doubles in reverse endianness])
	;;
sparc) archdir=sparc32 ;;
sparc64) archdir=sparc64 ;;
i?86) archdir=ix86 ;;
*)    AC_MSG_ERROR([no port for $target_cpu]) ;;
esac
AC_SUBST(ARCHDIR) ARCHDIR=${archdir}

AC_LINK_FILES(arch/${archdir}, include/asm)
AC_OUTPUT(Makefile arch/Makefile
	  arch/arm32/Makefile arch/sparc32/Makefile arch/sparc64/Makefile
	  arch/ix86/Makefile
	  src/Makefile src/jni/Makefile
	  src/java.io/Makefile src/java.lang/Makefile
	  src/java.util.zip/Makefile src/gc/Makefile)
