dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Revision: 1.55 $)dnl
AC_INIT(include/jni.h)
AC_CONFIG_AUX_DIR(scripts)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(flexrun, 0.0)
AM_CONFIG_HEADER(include/config.h)
AC_PREREQ(2.13) dnl require autoconf version 2.13

AC_SUBST(AS) AS='as'
AC_SUBST(CFLAGS) CFLAGS='-g' 
AC_SUBST(IFLAGS) IFLAGS='' 
AC_SUBST(GC_LIB) GC_LIB='' 
AC_SUBST(BDWFLAGS) BDWFLAGS='' dnl for B-D-W garbage collector build.

dnl Checks for programs.
AC_PROG_CC dnl also sets cross_compiling variable
AC_PROG_AWK
AC_PROG_RANLIB
AM_PROG_LIBTOOL
AC_PATH_PROG(FORTUNE, fortune, /usr/games/fortune)
AC_SUBST(FORTUNE)
AM_CONDITIONAL(CROSS_COMPILING, test x$cross_compiling = xyes)

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/types.h sys/time.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_OFF_T
AC_CACHE_CHECK([whether the system uses the O_BINARY flag],
	flexrun_cv_sys_obinary, AC_EGREP_CPP(yes, [
#include <fcntl.h>
#ifdef O_BINARY
 yes
#endif
], flexrun_cv_sys_obinary=yes, flexrun_cv_sys_obinary=no))
if test $flexrun_cv_sys_obinary != yes; then
  AC_DEFINE(O_BINARY, 0,
    [Define if your system doesn't support (or need) the O_BINARY flag])
fi

dnl Determine size of pointer types.
AC_ARG_WITH(pointer-size,
[  --with-pointer-size	  specify sizeof(void *) when cross-compiling],
  unset ac_cv_sizeof_void_p
  with_pointer_size=$withval, with_pointer_size=0 )
AC_CHECK_SIZEOF(void *, $with_pointer_size)
if test 0$ac_cv_sizeof_void_p -eq 0; then
  AC_MSG_ERROR([Cannot determine size of void *; use --with-pointer-size.])
fi

dnl Checks whether extern C functions have underscores prepended.
AC_CACHE_CHECK(for _ prefix on C symbol names, flexrun_cv_asm_underscores,
	[AC_TRY_LINK([asm("_flexrun_foobar:");], [flexrun_foobar();],
	flexrun_cv_asm_underscores=yes,
	flexrun_cv_asm_underscores=no)]);
if test $flexrun_cv_asm_underscores = no; then
	AC_DEFINE(NO_UNDERSCORES, 1,
		[Define if there is no _ prefix on C symbol names])
fi

dnl Checks for aout-style or elf-style segment declarations
AC_ARG_WITH(segment-type,
[  --with-segment-type={elf,aout} specify segment type (if autoconf can't guess)],
flexrun_cv_asm_segment_style=$withval,
AC_CACHE_CHECK(for segment declaration style, flexrun_cv_asm_segment_style,
	[AC_TRY_COMPILE([asm(".section foobar");],,
	flexrun_cv_asm_segment_style=elf,
	AC_TRY_COMPILE([asm(".text 0");],,
	flexrun_cv_asm_segment_style=aout,
	flexrun_cv_asm_segment_style=unknown))]))
if test "$flexrun_cv_asm_segment_style" = aout; then
	AC_DEFINE(AOUT_SEGMENTS, 1,
	[Define if this target uses a.out-style segments (data/text/bss only)])
elif test "$flexrun_cv_asm_segment_style" = elf; then
	AC_DEFINE(ELF_SEGMENTS, 1,
	[Define if this target uses ELF-style segments (arbitrary names)])
else
	AC_MSG_ERROR([Cannot determine proper segment declaration format.])
fi
AM_CONDITIONAL(AOUT_BUILD, test $flexrun_cv_asm_segment_style = aout)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL  dnl sometimes needed for ioctl to work properly.
AC_CHECK_FUNCS(select, ,AC_MSG_ERROR([select() not found]))
AC_CHECK_LIB(m, atan2) dnl link in math library.

dnl process option for 'precise c' backend.
AC_MSG_CHECKING([precise c backend])
AC_ARG_WITH(precise-c,
[  --with-precise-c        use 'precise c' backend],
with_precise_c="$withval", with_precise_c="no")
case "$with_precise_c" in
yes)	AC_MSG_RESULT([yes])
	AC_DEFINE(WITH_PRECISE_C_BACKEND, 1,
	[Define if you're using code generated with the 'precise c' backend])
	;;
*)	AC_MSG_RESULT([no])
	;;
esac

dnl process option to select full stack trace on exceptions.
AC_MSG_CHECKING([stack trace verbosity])
AC_ARG_WITH(full-stack-trace,
[  --with-full-stack-trace show all frames in exception trace],
full_stack_trace="$withval", full_stack_trace="no")
case "$full_stack_trace" in
yes)	AC_MSG_RESULT([full])
	AC_DEFINE(FULL_STACK_TRACE, 1,
		  [Define if you want native frames shown in exception traces])
	;;
*)	AC_MSG_RESULT([none (emulate jvm)])
	;;
esac

dnl process option to select threading model.
AC_MSG_CHECKING([threading model])
AC_ARG_WITH(thread-model,
[  --with-thread-model={[none],pth,heavy}       select threading model to use],
thread_model="$withval", thread_model="none")
case "$thread_model" in
heavy)  AC_MSG_RESULT([heavy-weight threads])
	AC_DEFINE(WITH_HEAVY_THREADS, 1,
		  [Define if you want to use heavyweight thread support])
	CFLAGS="$CFLAGS -D_REENTRANT"
	AC_SEARCH_LIBS(pthread_create, pthread, ,
		      AC_MSG_ERROR([couldn't find pthread library]))
	dnl Check for pthread_rwlock_t support.
	AC_MSG_CHECKING([for pthread_rwlock_t support])
	have_pthread_rwlock_t=yes
	AC_TRY_COMPILE([#include <pthread.h>],
	[pthread_rwlock_t rwlock=PTHREAD_RWLOCK_INITIALIZER;],
	AC_MSG_RESULT([okay.]),
	dnl didn't find rwlock_t.  try defining _XOPEN_SOURCE=500
	oldcflags="$CFLAGS"
	CFLAGS="$CFLAGS -D_XOPEN_SOURCE=500"
	AC_TRY_COMPILE([#include <pthread.h>],
	[pthread_rwlock_t rwlock=PTHREAD_RWLOCK_INITIALIZER;],
	AC_MSG_RESULT([-D_XOPEN_SOURCE=500 needed.]),
	AC_MSG_RESULT([not found.  installing work-around.])
	have_pthread_rwlock_t=no))
	if test x$have_pthread_rwlock_t = xyes; then
		AC_DEFINE(HAVE_PTHREAD_RWLOCK_T, 1,
		    [Define if your pthread library includes pthread_rwlock_t])
	fi
	# the BDW garbage collector needs to know which particular pthreads
	# implementation we're using.  I don't know how to test this at the
	# moment ... we'll just assume LinuxThreads.
	CFLAGS="-DLINUX_THREADS $CFLAGS"
	BDWFLAGS="-DLINUX_THREADS -D_REENTRANT"
	;;
pth)	AC_MSG_RESULT([GNU pth])
	AC_DEFINE(WITH_PTH_THREADS, 1,
		  [Define if you want to use GNU pth thread support])
	AC_SEARCH_LIBS(pth_init, pth, ,
			AC_MSG_ERROR([couldn't find pth library]))
	BDWFLAGS="-DGNUPTH_THREADS"
	;;
none)   AC_MSG_RESULT([no thread support])
	AC_DEFINE(WITH_NO_THREADS, 1,
		  [Define if you want no thread support])
	;;
*)	AC_MSG_ERROR([unknown threading model: $thread_model]) ;;
esac
if test $thread_model != none; then
	AC_DEFINE(WITH_THREADS, 1,
		  [Define if you want support for threads])
fi

dnl process option to select garbage collector
AC_MSG_CHECKING([garbage collector])
AC_ARG_WITH(gc,
[  --with-gc={[none],conservative,semi,precise} select garbage collector to use],
gc_type="$withval", gc_type="none")
case "$gc_type" in
semi)
	AC_MSG_RESULT([semi-precise gc])
	AC_DEFINE(BDW_CONSERVATIVE_GC, 1,
    	[Define if you are using the B-D-W conservative garbage collector])
	AC_DEFINE(WITH_SEMI_PRECISE_GC, 1,
		  [Define if you want semi-precise garbage collection])
	AC_LINK_FILES(Contrib/gc/gc.h, include/gc.h)
	AC_LINK_FILES(Contrib/gc/gc_typed.h, include/gc_typed.h)
	GC_LIB="Contrib/gc/gc.a src/gc/libgc.la"
	;;
precise)
	AC_MSG_RESULT([precise gc])
	AC_DEFINE(BDW_CONSERVATIVE_GC, 1,
    	[Define if you are using the B-D-W conservative garbage collector])
	AC_DEFINE(WITH_PRECISE_GC, 1,
		[Define if you want precise garbage collection])
	GC_LIB="Contrib/gc/gc.a src/gc/libgc.la"
	;;
conservative)
	AC_MSG_RESULT([B-D-W conservative gc])
	AC_DEFINE(BDW_CONSERVATIVE_GC, 1,
    	[Define if you are using the B-D-W conservative garbage collector])
	AC_LINK_FILES(Contrib/gc/gc.h, include/gc.h)
	dnl BDW collector at some point between 5.0a4 and 6.0a1 decided to
	dnl require you to link in the library (libdl) containing dlopen().
	GC_LIB="Contrib/gc/gc.a -ldl"
	;;
none)	AC_MSG_RESULT([no garbage collection])
	;;
*)	AC_MSG_ERROR([unknown garbage collector: $gc_type])	
	;;
esac
AM_CONDITIONAL(CONSERVATIVE_GC,
	test $gc_type = conservative -o $gc_type = semi -o $gc_type = precise)
AM_CONDITIONAL(PRECISE_GC, test $gc_type = precise -o $gc_type = semi)
AM_CONDITIONAL(SEMI_PRECISE_GC, test $gc_type = semi)

dnl experimental support for clustered heaps.
AC_MSG_CHECKING([for experimental clustered heap support])
AC_ARG_WITH(clustered-heaps,
[  --with-clustered-heaps  build experimental clustered heap support],
with_clustered_heaps=yes
AC_DEFINE(WITH_CLUSTERED_HEAPS, 1,
    [Define if you want to build the experimental clustered heap support]),
with_clustered_heaps=no)
AC_MSG_RESULT($with_clustered_heaps)
AM_CONDITIONAL(CLUSTERED_HEAPS, test $with_clustered_heaps = yes)

dnl experimental support for event-driven code.
AC_MSG_CHECKING([for experimental event-driven support])
AC_ARG_WITH(event-driven,
[  --with-event-driven	  build experimental event-driven support],
with_event_driven=yes
AC_DEFINE(WITH_EVENT_DRIVEN, 1,
    [Define if you want to build the experimental event-driven code support]),
with_event_driven=no)
AC_MSG_RESULT($with_event_driven)
AM_CONDITIONAL(EVENT_DRIVEN, test $with_event_driven = yes)

dnl select whether to collect and print statistics
AC_MSG_CHECKING([whether to collect and print statistics])
AC_ARG_WITH(statistics,
[  --with-statistics       collect and print execution statistics],
with_statistics=yes
AC_DEFINE(WITH_STATISTICS, 1,
    [Define if you want to collect and print execution statistics]),
with_statistics=no)
AC_MSG_RESULT($with_statistics)
AM_CONDITIONAL(STATISTICS, test $with_statistics = yes)

dnl set up dmalloc.  Last because gcc-based tests won't work after we add
dnl -ldmalloc to LIBS (because $(prefix) isn't set during autoconf).
AC_MSG_CHECKING([for dmalloc support])
AC_ARG_WITH(dmalloc,
[  --with-dmalloc	  use debugging malloc from www.dmalloc.com],
test "$withval" = yes && withval='$(prefix)'
test "$withval" || withval='$(prefix)'
AC_DEFINE(WITH_DMALLOC, 1,
    [Define if you are using the debugging malloc from www.dmalloc.com])
IFLAGS="$IFLAGS -I${withval}/include"
LDFLAGS="$LDFLAGS -L${withval}/lib"
if test x$thread_model = xheavy; then
	AC_MSG_RESULT([yes (threaded)])
	LIBS="$LIBS -ldmallocth"
else
	AC_MSG_RESULT([yes (not threaded)])
	LIBS="$LIBS -ldmalloc"
fi, AC_MSG_RESULT([no]))

dnl Match the CPU to an arch/ directory.
case "$target_cpu" in
arm*) archdir=arm32   
      AC_DEFINE(LONG_AND_DOUBLE_ARE_REVERSED, 1,
      [Define if your system stores doubles in reverse endianness])
      dnl StrongARM requires a software floating-point library.
      AC_DEFINE(HAVE_STACK_TRACE_FUNCTIONS, 1,
      [Define iff your target has stack tracing code in arch/<foo>/stack.h])
      LIBS="-lfloat $LIBS"
	;;
sparc) archdir=sparc32 ;;
sparc64) archdir=sparc64 ;;
i?86) archdir=ix86 ;;
mips) archdir=mips ;;
*)    AC_MSG_ERROR([no port for $target_cpu]) ;;
esac
AC_SUBST(ARCHDIR) ARCHDIR=${archdir}

AC_MSG_CHECKING(link script for $target_cpu)
CC="$CC" scripts/gen-link-script > arch/${archdir}/link-script
AC_MSG_RESULT(created in arch/${archdir}/link-script)

AC_LINK_FILES(arch/${archdir}, include/asm)
AC_OUTPUT(Makefile arch/Makefile
	  arch/arm32/Makefile arch/sparc32/Makefile arch/sparc64/Makefile
	  arch/ix86/Makefile arch/mips/Makefile
	  Contrib/Makefile Contrib/gc/Makefile
	  src/Makefile src/jni/Makefile
	  src/java.io/Makefile src/java.lang/Makefile
	  src/java.net/Makefile
	  src/java.util/Makefile src/java.util.zip/Makefile
	  src/clheap/Makefile src/nativeio/Makefile src/gc/Makefile
	  src/stats/Makefile)
