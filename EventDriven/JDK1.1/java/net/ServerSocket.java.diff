--- /j/net/ServerSocket.java	Mon Mar  6 23:14:03 2000
+++ ServerSocket.java	Mon Mar  6 23:08:47 2000
@@ -1,10 +1,10 @@
 /*
- * @(#)ServerSocket.java	1.32 98/10/02
+ * @(#)ServerSocket.java	1.34 99/04/22
  *
- * Copyright 1995-1998 by Sun Microsystems, Inc.,
+ * Copyright 1995-1999 by Sun Microsystems, Inc.,
  * 901 San Antonio Road, Palo Alto, California, 94303, U.S.A.
  * All rights reserved.
- *
+ * 
  * This software is the confidential and proprietary information
  * of Sun Microsystems, Inc. ("Confidential Information").  You
  * shall not disclose such Confidential Information and shall use
@@ -17,6 +17,9 @@
 import java.io.IOException;
 import java.io.FileDescriptor;
 
+import java.io.NativeIO;
+import harpoon.Analysis.ContBuilder.*;
+
 /**
  * This class implements server sockets. A server socket waits for 
  * requests to come in over the network. It performs some operation 
@@ -29,7 +32,7 @@
  * appropriate to the local firewall. 
  *
  * @author  unascribed
- * @version 1.32, 10/02/98
+ * @version 1.34, 04/22/99
  * @see     java.net.SocketImpl
  * @see     java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)
  * @since   JDK1.0
@@ -180,8 +183,15 @@
 	    impl.close();
 	    throw e;
 	}
+
+    }
+
+    public void makeAsync()
+    {
+	NativeIO.makeNonBlockJNI(impl.fd.fd);
     }
 
+
     /**
      * Returns the local address of this server socket.
      *
@@ -224,7 +234,62 @@
 	implAccept(s);
 	return s;
     }
+    
+    // optimistic version
+    public ObjectContinuation _acceptAsync() throws IOException {
+	//System.out.println("Calling canAccept...");
+	if (NativeIO.canAcceptJNI(impl.fd.fd)) {
+	    //System.out.println("Calling accept 1... ");
+	    ObjectContinuation.result= accept(); 
+	    //System.out.println("Accept done.");
+	    return null;
+	}
+	//System.out.println("doing continuations");
+	return new acceptAsyncC();
+    }
+    
+    class acceptAsyncC extends ObjectContinuation implements IOContinuation {
+    	Socket s;
 
+    public void exception(Throwable t) {};
+
+    private Continuation link;
+
+    public void setLink(Continuation newLink) { 
+	link= newLink;
+    }
+
+    public Continuation getLink() { 
+	return link;
+    }
+    	
+    	public acceptAsyncC() {
+    		s= new Socket();
+    		Scheduler.addRead(this);
+    	}
+    	
+    	public void resume()
+    	{
+    	  try{
+  	      // System.out.println("Calling accept 2... ");
+	      implAccept(s);
+	      // System.out.println("Accept done.");
+	      next.resume(s);
+    	  } catch (IOException e) { next.exception(e); }
+    	}
+    	
+    	public java.io.FileDescriptor getFD()
+    	{
+    		return impl.fd;
+    	}
+   
+    }
+
+    // pesimistic version
+    public ObjectContinuation acceptAsync() throws IOException
+    {
+	return ObjectDoneContinuation.pesimistic(_acceptAsync());
+    }
     /**
      * Subclasses of ServerSocket use this method to override accept()
      * to return their own subclass of socket.  So a FooServerSocket
@@ -234,29 +299,23 @@
      * @since   JDK1.1
      */
     protected final void implAccept(Socket s) throws IOException {
-	SocketImpl si = new PlainSocketImpl();
 	try {
-	    si.address = new InetAddress();
-	    si.fd = new FileDescriptor();
-	    impl.accept(si);
+	    s.impl.address = new InetAddress();
+	    s.impl.fd = new FileDescriptor();
+	    impl.accept(s.impl);
 	    
 	    SecurityManager security = System.getSecurityManager();
 	    if (security != null) {
-		security.checkAccept(si.getInetAddress().getHostAddress(),
-				     si.getPort());
+		security.checkAccept(s.impl.getInetAddress().getHostAddress(),
+				     s.impl.getPort());
 	    }
 	} catch (IOException e) {
-	    si.close();
+	    s.impl.close();
 	    throw e;
 	} catch (SecurityException e) {
-	    si.close();
+	    s.impl.close();
 	    throw e;
 	}
-	s.impl.address = si.address;
-	s.impl.fd = si.fd;
-	s.impl.port = si.port;
-	s.impl.localport = si.localport;
-	si.fd = null;
     }
 
     /**
