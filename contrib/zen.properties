##############################################################
# This file contains a series of properties that can
# be used to change the behaviour of Zen and its components.
##############################################################


#
# There are different logger implementation,
# the one that are available right now are
# the follwing:
#
#  - edu.uci.ece.zen.util.NullLogger: This logger actually
#    does not log any message.
#
#  - edu.uci.ece.zen.util.StreamLogger: Logs the output into
#    the given output and error stream.
#
#  - edu.uci.ece.zen.util.VisualLogger: Logs the output and error
#    on two graphical consoles.
#

zen.logger = edu.uci.ece.zen.util.ConsoleLogger
#zen.logger = edu.uci.ece.zen.util.NullLogger

#
# The POA uses the classpaths to load the strategies depending on the
# policies specified.
#

####################################################
########## IDUNIQUENESS Strategy  ##################
####################################################
poa.uniqueId   = edu.uci.ece.zen.poa.mechanism.UniqueIdStrategy
poa.multipleId = edu.uci.ece.zen.poa.mechanism.MultipleIdStrategy


######################################################
#########     LIFESPAN STRATEGY    ##################
#####################################################
poa.eternal   = edu.uci.ece.zen.poa.mechanism.PersistentStrategy
poa.ephemeral = edu.uci.ece.zen.poa.mechanism.TransientStrategy


#####################################################
##########   REQUEST PROCESSING STRATEGY ############
#####################################################
poa.aomOnly          = edu.uci.ece.zen.poa.mechanism.ActiveObjectMapOnlyStrategy
poa.defaultServant   = edu.uci.ece.zen.poa.mechanism.DefaultServantStrategy
poa.servantLocator   = edu.uci.ece.zen.poa.mechanism.ServantLocatorStrategy
poa.servantActivator = edu.uci.ece.zen.poa.mechanism.ServantActivator


#######################################################
########  SERVANT RETENTION STRATEGY #################
######################################################
poa.retain    = edu.uci.ece.zen.poa.mechanism.RetainStrategy
poa.nonRetain = edu.uci.ece.zen.poa.mechanism.NonRetainStrategy


######################################################
#########   ACTIVATION STRATEGY ######################
#####################################################
poa.implicitActivation = edu.uci.ece.zen.poa.mechanism.ImplicitActivationStrategy
poa.explicitActivation  = edu.uci.ece.zen.poa.mechanism.ExplicitActivationStrategy



#####################################################
########### ID ASSIGNMENT STRATEGY ##################
####################################################
poa.userId    = edu.uci.ece.zen.poa.mechanism.UserIdStrategy
poa.systemId  = edu.uci.ece.zen.poa.mechanism.SystemIdStrategy


#####################################################
########### THREAD STRATEGY ########################
####################################################
poa.singleThreaded = edu.uci.ece.zen.poa.mechanism.SingleThreadModelStrategy
poa.multiThreaded  = edu.uci.ece.zen.poa.mechanism.OrbControlModelStrategy


###################################################
# THREAD POOL CONFIGURATION
#
# 1: the number of executors in the pool
# 2: Buffer size of the Pool for this ORB.
#
#################################################
#
# Setting the Buffer Size for queueing requests
tp.bufferSize=100
#
# Setting the number of Executors = 4
tp.poolSize=4
#
# The Channel to use for the threadPool
# Either a bounded Bufer, synchronous Handoff, etc
#
tp.channel=edu.oswego.cs.dl.util.concurrent.BoundedBuffer
#
#The Executor type e.g a Simple executor/pooled executor etc
tp.executor=edu.uci.ece.zen.poa.ThreadPool
#
##################################################

# Base directory for this Zen instalation
zen.basedir = /groups/pces/uav_oep/atr_mit/work/ImageRec

# IOR file for naming service
naming.ior_File = /groups/pces/uav_oep/atr_mit/work/ImageRec/.jacorb
# IMR IOR file
imr.ior_file = /groups/pces/uav_oep/atr_mit/work/ImageRec/imr_ior


######################################
# Thread Option
# options : java.lang.Thread, 
#           javax.realtime.RealtimeThread
#######################################
zen.thread = java.lang.Thread

############################################
# Socket Options
# Setting the timeout values for sockets
# Server: The time of inactivity after which the server will
#         close its connection.
# Client: The time that a connect operation will block after which 
#	      it returns.
# Connection Retries: The number of times that client 
#                     will try to connect to Server 
#                     before giving up.
##########################################

zen.server_socket.timeout = 000
zen.client_socket.timeout = 000
zen.connect_retries = 5

###############################################################################
#                                                                             #
# If set to true, the ORB will use java.nio features and will make all i/o    #
# asynchronous. This should enhance performance.                              #
#                                                                             #
###############################################################################
zen.iiop.async = false

###############################################################################
#                                                                             #
# Buffer strategy: This can be used to set the type of byte buffer            #
#   that will be created. It can be set to 'Global' if you want only          #
#   one cache for all threads or you can set it to 'TSS' which will           #
#   create one cache per thread.                                              #
#                                                                             #
###############################################################################
zen.cdr.bufferStratergy = Global
#zen.cdr.bufferStratergy = TSS

###############################################################################
#                                                                             #
# Buffer Management strategy: This property sets how the CDR I/O stream       #
#   buffers are maintained.                                                   #
#       * If it is set to 'Vectored' the stream will store multiple buffers of#
#         small size. This method doesnot incur memory copying overhead but it#
#         makes multiple I/O calls to send the buffer.(Not implimented)       #
#       * If it is set to 'NonVectored' then the buffer grows in size if large#
#         messages are sent. However this stratergy incurs a penalty when     #
#         resizing the buffer.                                                #
#                                                                             #
###############################################################################
#zen.cdr.bufferManagementStratergy = NIO
zen.cdr.bufferManagementStratergy = NonVectored

###############################################################################
#                                                                             #
# Buffer Resize Strategy: This property is used to set how the the buffer is  #
#   maintained.                                                               #
#       * If set to 'Dynamic' the buffer is allocated using new each time it  #
#         is needed.                                                          #
#       * If set to 'Cached' the buffer is cached for reuse. This reduces the #
#         amount of garbage collection that is done.                          #
###############################################################################

#zen.cdr.bufferAllocationStratergy = Dynamic
zen.cdr.bufferAllocationStratergy = Cached

###################### Cached buffer allocator policies #######################
#                                                                             #
# messageBlock : This property specifies the amount by which a buffer grows   #
#                when the message size is determined to be bigger than the    #
#                current buffer.                                              #
# maxCachedMsgSize : This property specifies the maximum buffer size that is  #
#                stored in the cache.                                         #
# cacheBlocks :  This property specifies how many buffers should be kept for  #
#                each buffer size                                             #
#                                                                             #
###############################################################################

zen.giop.messageBlock = 1024
#zen.cdr.bufferCache.maxCachedMsgSize = 1048576
zen.cdr.bufferCache.maxCachedMsgSize = 4096
zen.cdr.bufferCache.cacheBlocks = 10
