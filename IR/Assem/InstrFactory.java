// InstrFactory.java, created Tue Feb  9  0:45:33 1999 by andyb
// Copyright (C) 1999 Andrew Berkheimer <andyb@mit.edu>
// Licensed under the terms of the GNU GPL; see COPYING for details.
package harpoon.IR.Assem;

import harpoon.Backend.Generic.Frame;
import harpoon.Temp.TempFactory;
import harpoon.ClassFile.HMethod;
import harpoon.ClassFile.HCode;

/**
 * A <code>InstrFactory</code> is responsible for generating 
 * generic <code>Assem.Instr</code>s used in code generation.
 *
 * @author  Andrew Berkheimer <andyb@mit.edu>
 * @version $Id: InstrFactory.java,v 1.1.2.5 1999-08-10 17:52:56 pnkfelix Exp $
 */
public abstract class InstrFactory {
    /** Returns the <code>TempFactory</code> to use for creating
     *  <code>Temp</code>s which are used as arguments to <code>Instr</code>s
     *  generated by this factory. */
    public abstract TempFactory tempFactory();

    /** Returns the <code>HCode</code> to which all <code>Instr</code>s
     *  generated by this factory belong. 
     */ 
    public abstract HCode getParent(); 

    /** Returns the <code>Frame</code> which is associated with all
     *  of the <code>Instr</code>s generated by this factory. */
    public abstract Frame getFrame();

    /** Returns the <code>HMethod</code> which corresponds to 
	<code>Instr</code>s generated by this factory.
	<BR><B>effects:</B> Returns the <code>HMethod</code>
	    associated with <code>this</code>, or <code>null</code> if
	    no such <code>HMethod</code> exists.  
    */
    public HMethod getMethod() { return getParent().getMethod(); }

    /** Returns a unique ID number for each new <code>Instr</code>
     *  generated by this factory. */
    public abstract int getUniqueID();

    /** Returns a human-readable representation for this 
     *  <code>InstrFactory</code>. */
    public String toString() {
        return "InstrFactory["+getParent().toString()+"]";
    }
}
