// Data.java, created Wed Sep  8 15:45:19 1999 by cananian
// Copyright (C) 1999 C. Scott Ananian <cananian@alumni.princeton.edu>
// Licensed under the terms of the GNU GPL; see COPYING for details.
package harpoon.IR.Tree;

import harpoon.Backend.Generic.Frame;
import harpoon.ClassFile.HClass;
import harpoon.ClassFile.HData;
import harpoon.ClassFile.HDataElement;
import harpoon.Temp.TempFactory;

import java.util.Iterator;
import java.util.List;
/**
 * <code>Data</code> is an abstract implementation of <code>HData</code>
 * for <code>IR.Tree</code> form.
 * 
 * @author  C. Scott Ananian <cananian@alumni.princeton.edu>
 * @version $Id: Data.java,v 1.1.2.20 1999-09-08 21:33:08 cananian Exp $
 */
public abstract class Data extends harpoon.ClassFile.HData {
    protected /*final*/ String desc;
    protected /*final*/ Frame frame;
    protected /*final*/ TreeFactory tf;

    /** Create a proper TreeFactory. */
    protected class TreeFactory extends harpoon.IR.Tree.TreeFactory {
	private int id=0;
	TreeFactory() { }
	// Everyone uses same TempFactory now.
	// CSA: doesn't seem right!
	public TempFactory tempFactory() { return frame.tempFactory(); }
	/** Returns the <code>HCode</code> to which all
	 *  <code>HDataElement</code>s generated by this factory belong. */
	public Data getParent() { return Data.this; }
	/** Returns the <code>HClass</code> to which all
	 *  <code>HDataElement</code>s generated by this factory belong. */
	public Frame getFrame() { return Data.this.frame; } 
	synchronized int getUniqueID() { return id++; }
	public String toString() { 
	    return "Data.TreeFactory["+getParent().toString()+"]"; 
	}
	public int hashCode() { return Data.this.hashCode(); }
    }
    protected Data(String name, Frame f) {
	this.desc = desc;
	this.frame = f;
	this.tf = new TreeFactory();
    }
    public String getDesc() { return desc; }

    /** Print a human-readable representation of this dataview */
    public void print(java.io.PrintWriter pw) {
	Print.print(pw, this);
    }
}
