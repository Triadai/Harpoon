// TreeFactory.java, created Fri Feb  5 05:41:27 1999 by cananian
// Copyright (C) 1999 C. Scott Ananian <cananian@alumni.princeton.edu>
// Licensed under the terms of the GNU GPL; see COPYING for details.
package harpoon.IR.Tree;

import harpoon.Backend.Generic.Frame;
import harpoon.ClassFile.HCode;
import harpoon.ClassFile.HMethod;
import harpoon.Temp.TempFactory;

/**
 * A <code>TreeFactory</code> is responsible for assigning unique numbers
 * to the <code>Tree</code> <code>Exp</code>s and <code>Stm</code>s in
 * a method, and for maintaining method-wide information (a pointer to
 * the parent <code>HCode</code>, a pointer to a
 * <code>harpoon.Backend.Generic.Frame</code>, etc.).
 * 
 * @author  C. Scott Ananian <cananian@alumni.princeton.edu>
 * @version $Id: TreeFactory.java,v 1.1.2.2 1999-09-08 21:33:09 cananian Exp $
 */
public abstract class TreeFactory  {
    /** Returns the <code>TempFactory</code> to use for <code>Temp</code>
     *  arguments to <code>Exp</code>s and <code>Stm</code>s generated by
     *  this factory. */
    public abstract TempFactory tempFactory();
    // FIXME: LabelFactory, too.
    /** Returns the <code>Frame</code> to be used to resolve
     *  machine-dependent issues for this <code>TreeFactory</code>. */
    public abstract Frame getFrame();
    /** Returns a unique number for an <code>Exp</code> or <code>Stm</code>
     *  within this <code>TreeFactory</code>. */
    abstract int getUniqueID();
    /** Returns a human-readable representation for this
     *  <code>TreeFactory</code>. */
    public abstract String toString();
    /** Generates a repeatable hashcode for this factory. */
    public abstract int hashCode();
}
