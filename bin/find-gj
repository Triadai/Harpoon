#!/bin/sh
# find a jsr-14 compiliant java compiler (compiles generic java)
### don't accept v2 as a valid compiler, yet. see GNUMakefile for explanation.
jsr14cc=not-found
CLS=h$$
echo "abstract class $CLS extends java.util.AbstractList<Integer> { public boolean addAll(java.util.Collection<? extends Integer> c) { return false; } }" \
    > /tmp/$CLS.java
if false ; then # disabling caching for non-intuitiveness.
  # preload last successful result from cache.
  if [ -f .find-gj-cache ]; then
    cached=$(head -1 .find-gj-cache)
    if $cached -d /tmp /tmp/$CLS.java 1>/dev/null 2>/dev/null; then
      echo $cached
      /bin/rm -f /tmp/$CLS.java /tmp/$CLS.class
      exit 0
    fi
  fi
fi
# okay, cached value didn't work.  look through all the possibilities.
for jc in ${JIKES:-jikes} ${JAVAC:-javac} ${JCC} \
          ${JSR14DISTR} ${HOME}/jsr14-ea-* ; do
    if [ -x $jc/scripts/javac ]; then
	export JSR14DISTR=$jc
	jcc="$jc/scripts/javac"
    else
	jcc="$jc"
	unset JSR14DISTR
    fi
    if $jcc -d /tmp -source 1.5 /tmp/$CLS.java 1>/dev/null 2>/dev/null; then
      jsr14cc="$jcc"
      jsr14base="$JSR14DISTR"
      break
    fi
done
/bin/rm -f /tmp/$CLS.java /tmp/$CLS.class
# cache successful result from last run
if [ "$jsr14cc" != "not-found" ]; then
  echo $jsr14cc > .find-gj-cache
  echo $jsr14base >> .find-gj-cache
fi
echo $jsr14cc
echo $jsr14base
